package net.meshmc.mesh.impl.util;

import net.meshmc.mesh.api.block.Block;
import net.meshmc.mesh.api.entity.EntityType;
import net.meshmc.mesh.impl.wrapper.entity.EntityMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.EntityLivingMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.EntitySlimeMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.EntityMobMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.*;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.guardian.EntityElderGuardianMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.guardian.EntityGuardianMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.piglin.EntityPiglinAbstractMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.piglin.EntityPiglinBruteMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.piglin.EntityPiglinMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.raider.*;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.skeleton.EntitySkeletonAbstractMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.skeleton.EntitySkeletonMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.skeleton.EntityStrayMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.skeleton.EntityWitherSkeletonMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.spider.EntityCaveSpiderMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.spider.EntitySpiderMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.hostile.zombie.*;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.EntityPassiveMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.EntityVillagerMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.EntityWanderingTraderMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.*;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.cow.EntityCowMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.cow.EntityMooshroomMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.EntityHorseBaseMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.EntityHorseMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.EntitySkeletonHorseMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.EntityZombieHorseMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.donkey.EntityAbstractDonkeyMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.donkey.EntityDonkeyMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.donkey.EntityMuleMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.donkey.llama.EntityLlamaMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.horse.donkey.llama.EntityTraderLlamaMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.tameable.EntityCatMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.tameable.EntityTameableMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.tameable.EntityWolfMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.tameable.shoulder.EntityParrotMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.mob.passive.animal.tameable.shoulder.EntityShoulderTameableMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.player.*;
import net.meshmc.mesh.impl.wrapper.entity.living.water.EntityDolphinMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.EntityWaterCreatureMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.fish.EntityFishMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.fish.EntityPufferfishMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.fish.schooling.EntityCodMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.fish.schooling.EntitySalmonMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.fish.schooling.EntitySchoolingFishMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.fish.schooling.EntityTropicalFishMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.squid.EntityGlowSquidMesh;
import net.meshmc.mesh.impl.wrapper.entity.living.water.squid.EntitySquidMesh;
import net.meshmc.mesh.impl.wrapper.network.PacketMesh;
import net.meshmc.mesh.impl.wrapper.network.client.*;
import net.meshmc.mesh.impl.wrapper.network.server.*;
import net.meshmc.mesh.impl.wrapper.world.ClientWorldMesh;
import net.meshmc.mesh.impl.wrapper.world.WorldMesh;
import net.meshmc.mesh.util.block.BlockVariant;
import net.meshmc.mesh.util.item.DyeColor;
import net.minecraft.block.AbstractBlock;
import net.minecraft.block.Blocks;
import net.minecraft.client.network.AbstractClientPlayerEntity;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.client.network.OtherClientPlayerEntity;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.boss.WitherEntity;
import net.minecraft.entity.mob.*;
import net.minecraft.entity.passive.*;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.raid.RaiderEntity;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.*;
import net.minecraft.network.packet.s2c.play.*;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.world.World;
import org.jetbrains.annotations.Nullable;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@SuppressWarnings({"rawtypes", "unchecked"})
public class Mappings {
    @FunctionalInterface
    public interface CreationWrapper<T, Y> {
        Y wrap(T value);
    }

    // WORLD Class Wrapping
    public static <T extends World> net.meshmc.mesh.api.world.World world(T world) {
        if(world == null) return null;
        return (net.meshmc.mesh.api.world.World) worldClassMap.get(world.getClass()).wrap(world);
    }

    private static final Map<Class<? extends World>, CreationWrapper> worldClassMap;
    static {
        worldClassMap = new HashMap<>();

        worldClassMap.put(World.class, value -> new WorldMesh<>((World) value));
        worldClassMap.put(ClientWorld.class, value -> new ClientWorldMesh<>((ClientWorld) value));
        worldClassMap.put(ServerWorld.class, value -> new WorldMesh<>((ServerWorld) value));
    }

    // ENTITY Class Wrapping
    public static <T extends Entity> net.meshmc.mesh.api.entity.Entity entity(T entity) {
        if(entity == null) return null;
        if(!entityClassMap.containsKey(entity.getClass())) return new EntityMesh<>(entity);
        return (net.meshmc.mesh.api.entity.Entity) entityClassMap.get(entity.getClass()).wrap(entity);
    }

    private static final Map<Class<? extends Entity>, CreationWrapper> entityClassMap;
    static {
        entityClassMap = new HashMap<>();

        entityClassMap.put(Entity.class, value -> new EntityMesh<>((Entity) value));

        // Living Entities
        entityClassMap.put(LivingEntity.class, value -> new EntityLivingMesh<>((LivingEntity) value));
        entityClassMap.put(SlimeEntity.class, value -> new EntitySlimeMesh<>((SlimeEntity) value));

        // Player Entities
        entityClassMap.put(PlayerEntity.class, value -> new EntityPlayerMesh<>((PlayerEntity) value));
        entityClassMap.put(AbstractClientPlayerEntity.class, value -> new EntityAbstractClientPlayerMesh<>((AbstractClientPlayerEntity) value));
        entityClassMap.put(ClientPlayerEntity.class, value -> new EntityClientPlayerMesh<>((ClientPlayerEntity) value));
        entityClassMap.put(OtherClientPlayerEntity.class, value -> new EntityOtherClientPlayerMesh<>((OtherClientPlayerEntity) value));
        entityClassMap.put(ServerPlayerEntity.class, value -> new EntityServerPlayerMesh<>((ServerPlayerEntity) value));

        entityClassMap.put(PathAwareEntity.class, value -> new EntityMobMesh<>((PathAwareEntity) value));

        // Hostile Mob Entities
        entityClassMap.put(HostileEntity.class, value -> new EntityHostileMesh<>((HostileEntity) value));
        entityClassMap.put(BlazeEntity.class, value -> new EntityBlazeMesh<>((BlazeEntity) value));
        entityClassMap.put(CreeperEntity.class, value -> new EntityCreeperMesh<>((CreeperEntity) value));
        entityClassMap.put(EndermanEntity.class, value -> new EntityEndermanMesh<>((EndermanEntity) value));
        entityClassMap.put(EndermiteEntity.class, value -> new EntityEndermiteMesh<>((EndermiteEntity) value));
        entityClassMap.put(GiantEntity.class, value -> new EntityGiantMesh<>((GiantEntity) value));
        entityClassMap.put(SilverfishEntity.class, value -> new EntitySilverfishMesh<>((SilverfishEntity) value));
        entityClassMap.put(VexEntity.class, value -> new EntityVexMesh<>((VexEntity) value));
        entityClassMap.put(WitherEntity.class, value -> new EntityWitherMesh<>((WitherEntity) value));
        entityClassMap.put(ZoglinEntity.class, value -> new EntityZoglinMesh<>((ZoglinEntity) value));

        entityClassMap.put(ZombieEntity.class, value -> new EntityZombieMesh<>((ZombieEntity) value));
        entityClassMap.put(DrownedEntity.class, value -> new EntityDrownedMesh<>((DrownedEntity) value));
        entityClassMap.put(HuskEntity.class, value -> new EntityHuskMesh<>((HuskEntity) value));
        entityClassMap.put(ZombifiedPiglinEntity.class, value -> new EntityZombiePigmanMesh<>((ZombifiedPiglinEntity) value));
        entityClassMap.put(ZombieVillagerEntity.class, value -> new EntityZombieVillagerMesh<>((ZombieVillagerEntity) value));

        entityClassMap.put(SpiderEntity.class, value -> new EntitySpiderMesh<>((SpiderEntity) value));
        entityClassMap.put(CaveSpiderEntity.class, value -> new EntityCaveSpiderMesh<>((CaveSpiderEntity) value));

        entityClassMap.put(AbstractSkeletonEntity.class, value -> new EntitySkeletonAbstractMesh<>((AbstractSkeletonEntity) value));
        entityClassMap.put(SkeletonEntity.class, value -> new EntitySkeletonMesh<>((SkeletonEntity) value));
        entityClassMap.put(StrayEntity.class, value -> new EntityStrayMesh<>((StrayEntity) value));
        entityClassMap.put(WitherSkeletonEntity.class, value -> new EntityWitherSkeletonMesh<>((WitherSkeletonEntity) value));

        entityClassMap.put(EvokerEntity.class, value -> new EntityEvokerMesh<>((EvokerEntity) value));
        entityClassMap.put(SpellcastingIllagerEntity.class, value -> new EntityIllagerSpellcasterMesh<>((SpellcastingIllagerEntity) value));
        entityClassMap.put(IllusionerEntity.class, value -> new EntityIllusionerMesh<>((IllusionerEntity) value));
        entityClassMap.put(PillagerEntity.class, value -> new EntityPillagerMesh<>((PillagerEntity) value));
        entityClassMap.put(RaiderEntity.class, value -> new EntityRaiderAbstractMesh<>((RaiderEntity) value));
        entityClassMap.put(RavagerEntity.class, value -> new EntityRavagerMesh<>((RavagerEntity) value));
        entityClassMap.put(VindicatorEntity.class, value -> new EntityVindicatorMesh<>((VindicatorEntity) value));
        entityClassMap.put(WitchEntity.class, value -> new EntityWitchMesh<>((WitchEntity) value));

        entityClassMap.put(AbstractPiglinEntity.class, value -> new EntityPiglinAbstractMesh<>((AbstractPiglinEntity) value));
        entityClassMap.put(PiglinBruteEntity.class, value -> new EntityPiglinBruteMesh<>((PiglinBruteEntity) value));
        entityClassMap.put(PiglinEntity.class, value -> new EntityPiglinMesh<>((PiglinEntity) value));

        entityClassMap.put(GuardianEntity.class, value -> new EntityGuardianMesh<>((GuardianEntity) value));
        entityClassMap.put(ElderGuardianEntity.class, value -> new EntityElderGuardianMesh<>((ElderGuardianEntity) value));

        // Passive Entities
        entityClassMap.put(PassiveEntity.class, value -> new EntityPassiveMesh<>((PassiveEntity) value));

        entityClassMap.put(VillagerEntity.class, value -> new EntityVillagerMesh<>((VillagerEntity) value));
        entityClassMap.put(WanderingTraderEntity.class, value -> new EntityWanderingTraderMesh<>((WanderingTraderEntity) value));

        entityClassMap.put(AnimalEntity.class, value -> new EntityAnimalMesh<>((AnimalEntity) value));

        entityClassMap.put(CowEntity.class, value -> new EntityCowMesh<>((CowEntity) value));
        entityClassMap.put(MooshroomEntity.class, value -> new EntityMooshroomMesh<>((MooshroomEntity) value));

        entityClassMap.put(AbstractHorseEntity.class, value -> new EntityHorseBaseMesh<>((AbstractHorseEntity) value));
        entityClassMap.put(HorseEntity.class, value -> new EntityHorseMesh<>((HorseEntity) value));
        entityClassMap.put(SkeletonHorseEntity.class, value -> new EntitySkeletonHorseMesh<>((SkeletonHorseEntity) value));
        entityClassMap.put(ZombieHorseEntity.class, value -> new EntityZombieHorseMesh<>((ZombieHorseEntity) value));
        entityClassMap.put(AbstractDonkeyEntity.class, value -> new EntityAbstractDonkeyMesh<>((AbstractDonkeyEntity) value));
        entityClassMap.put(DonkeyEntity.class, value -> new EntityDonkeyMesh<>((DonkeyEntity) value));
        entityClassMap.put(MuleEntity.class, value -> new EntityMuleMesh<>((MuleEntity) value));
        entityClassMap.put(LlamaEntity.class, value -> new EntityLlamaMesh<>((LlamaEntity) value));
        entityClassMap.put(TraderLlamaEntity.class, value -> new EntityTraderLlamaMesh<>((TraderLlamaEntity) value));

        entityClassMap.put(TameableEntity.class, value -> new EntityTameableMesh<>((TameableEntity) value));
        entityClassMap.put(CatEntity.class, value -> new EntityCatMesh<>((CatEntity) value));
        entityClassMap.put(WolfEntity.class, value -> new EntityWolfMesh<>((WolfEntity) value));
        entityClassMap.put(TameableShoulderEntity.class, value -> new EntityShoulderTameableMesh<>((TameableShoulderEntity) value));
        entityClassMap.put(ParrotEntity.class, value -> new EntityParrotMesh<>((ParrotEntity) value));

        entityClassMap.put(AxolotlEntity.class, value -> new EntityAxolotlMesh<>((AxolotlEntity) value));
        entityClassMap.put(BeeEntity.class, value -> new EntityBeeMesh<>((BeeEntity) value));
        entityClassMap.put(ChickenEntity.class, value -> new EntityChickenMesh<>((ChickenEntity) value));
        entityClassMap.put(FoxEntity.class, value -> new EntityFoxMesh<>((FoxEntity) value));
        entityClassMap.put(GoatEntity.class, value -> new EntityGoatMesh<>((GoatEntity) value));
        entityClassMap.put(HoglinEntity.class, value -> new EntityHoglinMesh<>((HoglinEntity) value));
        entityClassMap.put(OcelotEntity.class, value -> new EntityOcelotMesh<>((OcelotEntity) value));
        entityClassMap.put(PandaEntity.class, value -> new EntityPandaMesh<>((PandaEntity) value));
        entityClassMap.put(PigEntity.class, value -> new EntityPigMesh<>((PigEntity) value));
        entityClassMap.put(PolarBearEntity.class, value -> new EntityPolarBearMesh<>((PolarBearEntity) value));
        entityClassMap.put(RabbitEntity.class, value -> new EntityRabbitMesh<>((RabbitEntity) value));
        entityClassMap.put(SheepEntity.class, value -> new EntitySheepMesh<>((SheepEntity) value));
        entityClassMap.put(StriderEntity.class, value -> new EntityStriderMesh<>((StriderEntity) value));
        entityClassMap.put(TurtleEntity.class, value -> new EntityTurtleMesh<>((TurtleEntity) value));

        entityClassMap.put(WaterCreatureEntity.class, value -> new EntityWaterCreatureMesh<>((WaterCreatureEntity) value));
        entityClassMap.put(DolphinEntity.class, value -> new EntityDolphinMesh<>((DolphinEntity) value));
        entityClassMap.put(SquidEntity.class, value -> new EntitySquidMesh<>((SquidEntity) value));
        entityClassMap.put(GlowSquidEntity.class, value -> new EntityGlowSquidMesh<>((GlowSquidEntity) value));
        entityClassMap.put(FishEntity.class, value -> new EntityFishMesh<>((FishEntity) value));
        entityClassMap.put(PufferfishEntity.class, value -> new EntityPufferfishMesh<>((PufferfishEntity) value));
        entityClassMap.put(SchoolingFishEntity.class, value -> new EntitySchoolingFishMesh<>((SchoolingFishEntity) value));
        entityClassMap.put(CodEntity.class, value -> new EntityCodMesh<>((CodEntity) value));
        entityClassMap.put(SalmonEntity.class, value -> new EntitySalmonMesh<>((SalmonEntity) value));
        entityClassMap.put(TropicalFishEntity.class, value -> new EntityTropicalFishMesh<>((TropicalFishEntity) value));
    }

    // ENTITY Type Map
    public static EntityType entityType(Entity entity) {
        return entityTypeMap.get(entity.getType());
    }

    private static final Map<net.minecraft.entity.EntityType<?>, EntityType> entityTypeMap;
    static {
        entityTypeMap = new HashMap<>();

        entityTypeMap.put(net.minecraft.entity.EntityType.AREA_EFFECT_CLOUD, EntityType.AREA_EFFECT_CLOUD);
        entityTypeMap.put(net.minecraft.entity.EntityType.ARMOR_STAND, EntityType.ARMOR_STAND);
        entityTypeMap.put(net.minecraft.entity.EntityType.ARROW, EntityType.ARROW);
        entityTypeMap.put(net.minecraft.entity.EntityType.AXOLOTL, EntityType.AXOLOTL);
        entityTypeMap.put(net.minecraft.entity.EntityType.BAT, EntityType.BAT);
        entityTypeMap.put(net.minecraft.entity.EntityType.BEE, EntityType.BEE);
        entityTypeMap.put(net.minecraft.entity.EntityType.BLAZE, EntityType.BLAZE);
        entityTypeMap.put(net.minecraft.entity.EntityType.BOAT, EntityType.BOAT);
        entityTypeMap.put(net.minecraft.entity.EntityType.CAT, EntityType.CAT);
        entityTypeMap.put(net.minecraft.entity.EntityType.CAVE_SPIDER, EntityType.CAVE_SPIDER);
        entityTypeMap.put(net.minecraft.entity.EntityType.CHICKEN, EntityType.CHICKEN);
        entityTypeMap.put(net.minecraft.entity.EntityType.COD, EntityType.COD);
        entityTypeMap.put(net.minecraft.entity.EntityType.COW, EntityType.COW);
        entityTypeMap.put(net.minecraft.entity.EntityType.CREEPER, EntityType.CREEPER);
        entityTypeMap.put(net.minecraft.entity.EntityType.DOLPHIN, EntityType.DOLPHIN);
        entityTypeMap.put(net.minecraft.entity.EntityType.DONKEY, EntityType.DONKEY);
        entityTypeMap.put(net.minecraft.entity.EntityType.DRAGON_FIREBALL, EntityType.DRAGON_FIREBALL);
        entityTypeMap.put(net.minecraft.entity.EntityType.DROWNED, EntityType.DROWNED);
        entityTypeMap.put(net.minecraft.entity.EntityType.ELDER_GUARDIAN, EntityType.ELDER_GUARDIAN);
        entityTypeMap.put(net.minecraft.entity.EntityType.END_CRYSTAL, EntityType.END_CRYSTAL);
        entityTypeMap.put(net.minecraft.entity.EntityType.ENDER_DRAGON, EntityType.ENDER_DRAGON);
        entityTypeMap.put(net.minecraft.entity.EntityType.ENDERMAN, EntityType.ENDERMAN);
        entityTypeMap.put(net.minecraft.entity.EntityType.ENDERMITE, EntityType.ENDERMITE);
        entityTypeMap.put(net.minecraft.entity.EntityType.EVOKER, EntityType.EVOKER);
        entityTypeMap.put(net.minecraft.entity.EntityType.EVOKER_FANGS, EntityType.EVOKER_FANGS);
        entityTypeMap.put(net.minecraft.entity.EntityType.EXPERIENCE_ORB, EntityType.EXPERIENCE_ORB);
        entityTypeMap.put(net.minecraft.entity.EntityType.EYE_OF_ENDER, EntityType.EYE_OF_ENDER);
        entityTypeMap.put(net.minecraft.entity.EntityType.FALLING_BLOCK, EntityType.FALLING_BLOCK);
        entityTypeMap.put(net.minecraft.entity.EntityType.FIREWORK_ROCKET, EntityType.FIREWORK_ROCKET);
        entityTypeMap.put(net.minecraft.entity.EntityType.FOX, EntityType.FOX);
        entityTypeMap.put(net.minecraft.entity.EntityType.GHAST, EntityType.GHAST);
        entityTypeMap.put(net.minecraft.entity.EntityType.GIANT, EntityType.GIANT);
        entityTypeMap.put(net.minecraft.entity.EntityType.GLOW_ITEM_FRAME, EntityType.GLOW_ITEM_FRAME);
        entityTypeMap.put(net.minecraft.entity.EntityType.GLOW_SQUID, EntityType.GLOW_SQUID);
        entityTypeMap.put(net.minecraft.entity.EntityType.GOAT, EntityType.GOAT);
        entityTypeMap.put(net.minecraft.entity.EntityType.GUARDIAN, EntityType.GUARDIAN);
        entityTypeMap.put(net.minecraft.entity.EntityType.HOGLIN, EntityType.HOGLIN);
        entityTypeMap.put(net.minecraft.entity.EntityType.HORSE, EntityType.HORSE);
        entityTypeMap.put(net.minecraft.entity.EntityType.HUSK, EntityType.HUSK);
        entityTypeMap.put(net.minecraft.entity.EntityType.ILLUSIONER, EntityType.ILLUSIONER);
        entityTypeMap.put(net.minecraft.entity.EntityType.IRON_GOLEM, EntityType.IRON_GOLEM);
        entityTypeMap.put(net.minecraft.entity.EntityType.ITEM, EntityType.ITEM);
        entityTypeMap.put(net.minecraft.entity.EntityType.ITEM_FRAME, EntityType.ITEM_FRAME);
        entityTypeMap.put(net.minecraft.entity.EntityType.FIREBALL, EntityType.FIREBALL);
        entityTypeMap.put(net.minecraft.entity.EntityType.LEASH_KNOT, EntityType.LEASH_KNOT);
        entityTypeMap.put(net.minecraft.entity.EntityType.LIGHTNING_BOLT, EntityType.LIGHTNING_BOLT);
        entityTypeMap.put(net.minecraft.entity.EntityType.LLAMA, EntityType.LLAMA);
        entityTypeMap.put(net.minecraft.entity.EntityType.LLAMA_SPIT, EntityType.LLAMA_SPIT);
        entityTypeMap.put(net.minecraft.entity.EntityType.MAGMA_CUBE, EntityType.MAGMA_CUBE);
        entityTypeMap.put(net.minecraft.entity.EntityType.MARKER, EntityType.MARKER);
        entityTypeMap.put(net.minecraft.entity.EntityType.MINECART, EntityType.MINECART);
        entityTypeMap.put(net.minecraft.entity.EntityType.CHEST_MINECART, EntityType.CHEST_MINECART);
        entityTypeMap.put(net.minecraft.entity.EntityType.COMMAND_BLOCK_MINECART, EntityType.COMMAND_BLOCK_MINECART);
        entityTypeMap.put(net.minecraft.entity.EntityType.FURNACE_MINECART, EntityType.FURNACE_MINECART);
        entityTypeMap.put(net.minecraft.entity.EntityType.HOPPER_MINECART, EntityType.HOPPER_MINECART);
        entityTypeMap.put(net.minecraft.entity.EntityType.SPAWNER_MINECART, EntityType.SPAWNER_MINECART);
        entityTypeMap.put(net.minecraft.entity.EntityType.TNT_MINECART, EntityType.TNT_MINECART);
        entityTypeMap.put(net.minecraft.entity.EntityType.MULE, EntityType.MULE);
        entityTypeMap.put(net.minecraft.entity.EntityType.MOOSHROOM, EntityType.MOOSHROOM);
        entityTypeMap.put(net.minecraft.entity.EntityType.OCELOT, EntityType.OCELOT);
        entityTypeMap.put(net.minecraft.entity.EntityType.PAINTING, EntityType.PAINTING);
        entityTypeMap.put(net.minecraft.entity.EntityType.PANDA, EntityType.PANDA);
        entityTypeMap.put(net.minecraft.entity.EntityType.PARROT, EntityType.PARROT);
        entityTypeMap.put(net.minecraft.entity.EntityType.PHANTOM, EntityType.PHANTOM);
        entityTypeMap.put(net.minecraft.entity.EntityType.PIG, EntityType.PIG);
        entityTypeMap.put(net.minecraft.entity.EntityType.PIGLIN, EntityType.PIGLIN);
        entityTypeMap.put(net.minecraft.entity.EntityType.PIGLIN_BRUTE, EntityType.PIGLIN_BRUTE);
        entityTypeMap.put(net.minecraft.entity.EntityType.PILLAGER, EntityType.PILLAGER);
        entityTypeMap.put(net.minecraft.entity.EntityType.POLAR_BEAR, EntityType.POLAR_BEAR);
        entityTypeMap.put(net.minecraft.entity.EntityType.TNT, EntityType.TNT);
        entityTypeMap.put(net.minecraft.entity.EntityType.PUFFERFISH, EntityType.PUFFERFISH);
        entityTypeMap.put(net.minecraft.entity.EntityType.RABBIT, EntityType.RABBIT);
        entityTypeMap.put(net.minecraft.entity.EntityType.RAVAGER, EntityType.RAVAGER);
        entityTypeMap.put(net.minecraft.entity.EntityType.SALMON, EntityType.SALMON);
        entityTypeMap.put(net.minecraft.entity.EntityType.SHEEP, EntityType.SHEEP);
        entityTypeMap.put(net.minecraft.entity.EntityType.SHULKER, EntityType.SHULKER);
        entityTypeMap.put(net.minecraft.entity.EntityType.SHULKER_BULLET, EntityType.SHULKER_BULLET);
        entityTypeMap.put(net.minecraft.entity.EntityType.SILVERFISH, EntityType.SILVERFISH);
        entityTypeMap.put(net.minecraft.entity.EntityType.SKELETON, EntityType.SKELETON);
        entityTypeMap.put(net.minecraft.entity.EntityType.SKELETON_HORSE, EntityType.SKELETON_HORSE);
        entityTypeMap.put(net.minecraft.entity.EntityType.SLIME, EntityType.SLIME);
        entityTypeMap.put(net.minecraft.entity.EntityType.SMALL_FIREBALL, EntityType.SMALL_FIREBALL);
        entityTypeMap.put(net.minecraft.entity.EntityType.SNOW_GOLEM, EntityType.SNOW_GOLEM);
        entityTypeMap.put(net.minecraft.entity.EntityType.SNOWBALL, EntityType.SNOWBALL);
        entityTypeMap.put(net.minecraft.entity.EntityType.SPECTRAL_ARROW, EntityType.SPECTRAL_ARROW);
        entityTypeMap.put(net.minecraft.entity.EntityType.SPIDER, EntityType.SPIDER);
        entityTypeMap.put(net.minecraft.entity.EntityType.SQUID, EntityType.SQUID);
        entityTypeMap.put(net.minecraft.entity.EntityType.STRAY, EntityType.STRAY);
        entityTypeMap.put(net.minecraft.entity.EntityType.STRIDER, EntityType.STRIDER);
        entityTypeMap.put(net.minecraft.entity.EntityType.EGG, EntityType.EGG);
        entityTypeMap.put(net.minecraft.entity.EntityType.ENDER_PEARL, EntityType.ENDER_PEARL);
        entityTypeMap.put(net.minecraft.entity.EntityType.EXPERIENCE_BOTTLE, EntityType.EXPERIENCE_BOTTLE);
        entityTypeMap.put(net.minecraft.entity.EntityType.POTION, EntityType.POTION);
        entityTypeMap.put(net.minecraft.entity.EntityType.TRIDENT, EntityType.TRIDENT);
        entityTypeMap.put(net.minecraft.entity.EntityType.TRADER_LLAMA, EntityType.TRADER_LLAMA);
        entityTypeMap.put(net.minecraft.entity.EntityType.TROPICAL_FISH, EntityType.TROPICAL_FISH);
        entityTypeMap.put(net.minecraft.entity.EntityType.TURTLE, EntityType.TURTLE);
        entityTypeMap.put(net.minecraft.entity.EntityType.VEX, EntityType.VEX);
        entityTypeMap.put(net.minecraft.entity.EntityType.VILLAGER, EntityType.VILLAGER);
        entityTypeMap.put(net.minecraft.entity.EntityType.VINDICATOR, EntityType.VINDICATOR);
        entityTypeMap.put(net.minecraft.entity.EntityType.WANDERING_TRADER, EntityType.WANDERING_TRADER);
        entityTypeMap.put(net.minecraft.entity.EntityType.WITCH, EntityType.WITCH);
        entityTypeMap.put(net.minecraft.entity.EntityType.WITHER, EntityType.WITHER);
        entityTypeMap.put(net.minecraft.entity.EntityType.WITHER_SKELETON, EntityType.WITHER_SKELETON);
        entityTypeMap.put(net.minecraft.entity.EntityType.WITHER_SKULL, EntityType.WITHER_SKULL);
        entityTypeMap.put(net.minecraft.entity.EntityType.WOLF, EntityType.WOLF);
        entityTypeMap.put(net.minecraft.entity.EntityType.ZOGLIN, EntityType.ZOGLIN);
        entityTypeMap.put(net.minecraft.entity.EntityType.ZOMBIE, EntityType.ZOMBIE);
        entityTypeMap.put(net.minecraft.entity.EntityType.ZOMBIE_HORSE, EntityType.ZOMBIE_HORSE);
        entityTypeMap.put(net.minecraft.entity.EntityType.ZOMBIE_VILLAGER, EntityType.ZOMBIE_VILLAGER);
        entityTypeMap.put(net.minecraft.entity.EntityType.ZOMBIFIED_PIGLIN, EntityType.ZOMBIFIED_PIGLIN);
        entityTypeMap.put(net.minecraft.entity.EntityType.PLAYER, EntityType.PLAYER);
        entityTypeMap.put(net.minecraft.entity.EntityType.FISHING_BOBBER, EntityType.FISHING_BOBBER);
    }

    // BLOCK Map
    public static Block block(net.minecraft.block.Block block) {
        return blockMap.get(block);
    }

    private static final Map<net.minecraft.block.Block, Block> blockMap;
    static {
        blockMap = new HashMap<>();

        blockMap.put(Blocks.AIR, Block.AIR);
        blockMap.put(Blocks.STONE, Block.STONE);
        blockMap.put(Blocks.GRANITE, Block.STONE);
        blockMap.put(Blocks.POLISHED_GRANITE, Block.STONE);
        blockMap.put(Blocks.DIORITE, Block.STONE);
        blockMap.put(Blocks.POLISHED_DIORITE, Block.STONE);
        blockMap.put(Blocks.ANDESITE, Block.STONE);
        blockMap.put(Blocks.POLISHED_ANDESITE, Block.STONE);
        blockMap.put(Blocks.GRASS_BLOCK, Block.DIRT);
        blockMap.put(Blocks.DIRT, Block.DIRT);
        blockMap.put(Blocks.COARSE_DIRT, Block.DIRT);
        blockMap.put(Blocks.PODZOL, Block.DIRT);
        blockMap.put(Blocks.COBBLESTONE, Block.COBBLESTONE);
        blockMap.put(Blocks.OAK_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.SPRUCE_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.BIRCH_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.JUNGLE_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.ACACIA_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.DARK_OAK_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.OAK_SAPLING, Block.WOOD_SAPLING);
        blockMap.put(Blocks.SPRUCE_SAPLING, Block.WOOD_SAPLING);
        blockMap.put(Blocks.BIRCH_SAPLING, Block.WOOD_SAPLING);
        blockMap.put(Blocks.JUNGLE_SAPLING, Block.WOOD_SAPLING);
        blockMap.put(Blocks.ACACIA_SAPLING, Block.WOOD_SAPLING);
        blockMap.put(Blocks.DARK_OAK_SAPLING, Block.WOOD_SAPLING);
        blockMap.put(Blocks.BEDROCK, Block.BEDROCK);
        blockMap.put(Blocks.WATER, Block.WATER);
        blockMap.put(Blocks.LAVA, Block.LAVA);
        blockMap.put(Blocks.SAND, Block.SAND);
        blockMap.put(Blocks.RED_SAND, Block.SAND);
        blockMap.put(Blocks.GRAVEL, Block.GRAVEL);
        blockMap.put(Blocks.GOLD_ORE, Block.GOLD_ORE);
        blockMap.put(Blocks.DEEPSLATE_GOLD_ORE, Block.DEEPSLATE_GOLD_ORE);
        blockMap.put(Blocks.IRON_ORE, Block.IRON_ORE);
        blockMap.put(Blocks.DEEPSLATE_IRON_ORE, Block.DEEPSLATE_IRON_ORE);
        blockMap.put(Blocks.COAL_ORE, Block.COAL_ORE);
        blockMap.put(Blocks.DEEPSLATE_COAL_ORE, Block.DEEPSLATE_COAL_ORE);
        blockMap.put(Blocks.NETHER_GOLD_ORE, Block.NETHER_GOLD_ORE);
        blockMap.put(Blocks.OAK_LOG, Block.WOOD_LOG);
        blockMap.put(Blocks.SPRUCE_LOG, Block.WOOD_LOG);
        blockMap.put(Blocks.BIRCH_LOG, Block.WOOD_LOG);
        blockMap.put(Blocks.JUNGLE_LOG, Block.WOOD_LOG);
        blockMap.put(Blocks.ACACIA_LOG, Block.WOOD_LOG);
        blockMap.put(Blocks.DARK_OAK_LOG, Block.WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_SPRUCE_LOG, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_BIRCH_LOG, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_JUNGLE_LOG, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_ACACIA_LOG, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_DARK_OAK_LOG, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_OAK_LOG, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.OAK_WOOD, Block.WOOD_BLOCK);
        blockMap.put(Blocks.SPRUCE_WOOD, Block.WOOD_BLOCK);
        blockMap.put(Blocks.BIRCH_WOOD, Block.WOOD_BLOCK);
        blockMap.put(Blocks.JUNGLE_WOOD, Block.WOOD_BLOCK);
        blockMap.put(Blocks.ACACIA_WOOD, Block.WOOD_BLOCK);
        blockMap.put(Blocks.DARK_OAK_WOOD, Block.WOOD_BLOCK);
        blockMap.put(Blocks.STRIPPED_OAK_WOOD, Block.STRIPPED_WOOD_BLOCK);
        blockMap.put(Blocks.STRIPPED_SPRUCE_WOOD, Block.STRIPPED_WOOD_BLOCK);
        blockMap.put(Blocks.STRIPPED_BIRCH_WOOD, Block.STRIPPED_WOOD_BLOCK);
        blockMap.put(Blocks.STRIPPED_JUNGLE_WOOD, Block.STRIPPED_WOOD_BLOCK);
        blockMap.put(Blocks.STRIPPED_ACACIA_WOOD, Block.STRIPPED_WOOD_BLOCK);
        blockMap.put(Blocks.STRIPPED_DARK_OAK_WOOD, Block.STRIPPED_WOOD_BLOCK);
        blockMap.put(Blocks.OAK_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.SPRUCE_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.BIRCH_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.JUNGLE_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.ACACIA_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.DARK_OAK_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.AZALEA_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.FLOWERING_AZALEA_LEAVES, Block.LEAVES);
        blockMap.put(Blocks.SPONGE, Block.SPONGE);
        blockMap.put(Blocks.WET_SPONGE, Block.SPONGE);
        blockMap.put(Blocks.GLASS, Block.GLASS);
        blockMap.put(Blocks.LAPIS_ORE, Block.LAPIS_ORE);
        blockMap.put(Blocks.DEEPSLATE_LAPIS_ORE, Block.DEEPSLATE_LAPIS_ORE);
        blockMap.put(Blocks.LAPIS_BLOCK, Block.LAPIS_BLOCK);
        blockMap.put(Blocks.DISPENSER, Block.DISPENSER);
        blockMap.put(Blocks.SANDSTONE, Block.SANDSTONE);
        blockMap.put(Blocks.CHISELED_SANDSTONE, Block.SANDSTONE);
        blockMap.put(Blocks.CUT_SANDSTONE, Block.SANDSTONE);
        blockMap.put(Blocks.NOTE_BLOCK, Block.NOTE_BLOCK);
        blockMap.put(Blocks.WHITE_BED, Block.BED);
        blockMap.put(Blocks.ORANGE_BED, Block.BED);
        blockMap.put(Blocks.MAGENTA_BED, Block.BED);
        blockMap.put(Blocks.LIGHT_BLUE_BED, Block.BED);
        blockMap.put(Blocks.YELLOW_BED, Block.BED);
        blockMap.put(Blocks.LIME_BED, Block.BED);
        blockMap.put(Blocks.PINK_BED, Block.BED);
        blockMap.put(Blocks.GRAY_BED, Block.BED);
        blockMap.put(Blocks.LIGHT_GRAY_BED, Block.BED);
        blockMap.put(Blocks.CYAN_BED, Block.BED);
        blockMap.put(Blocks.PURPLE_BED, Block.BED);
        blockMap.put(Blocks.BLUE_BED, Block.BED);
        blockMap.put(Blocks.BROWN_BED, Block.BED);
        blockMap.put(Blocks.GREEN_BED, Block.BED);
        blockMap.put(Blocks.RED_BED, Block.BED);
        blockMap.put(Blocks.BLACK_BED, Block.BED);
        blockMap.put(Blocks.POWERED_RAIL, Block.POWERED_RAIL);
        blockMap.put(Blocks.DETECTOR_RAIL, Block.DETECTOR_RAIL);
        blockMap.put(Blocks.STICKY_PISTON, Block.STICKY_PISTON);
        blockMap.put(Blocks.COBWEB, Block.COBWEB);
        blockMap.put(Blocks.GRASS, Block.GRASS);
        blockMap.put(Blocks.FERN, Block.FERN);
        blockMap.put(Blocks.DEAD_BUSH, Block.DEAD_BUSH);
        blockMap.put(Blocks.SEAGRASS, Block.SEAGRASS);
        blockMap.put(Blocks.TALL_SEAGRASS, Block.TALL_SEAGRASS);
        blockMap.put(Blocks.PISTON, Block.PISTON);
        blockMap.put(Blocks.PISTON_HEAD, Block.PISTON_HEAD);
        blockMap.put(Blocks.WHITE_WOOL, Block.WOOL);
        blockMap.put(Blocks.ORANGE_WOOL, Block.WOOL);
        blockMap.put(Blocks.MAGENTA_WOOL, Block.WOOL);
        blockMap.put(Blocks.LIGHT_BLUE_WOOL, Block.WOOL);
        blockMap.put(Blocks.YELLOW_WOOL, Block.WOOL);
        blockMap.put(Blocks.LIME_WOOL, Block.WOOL);
        blockMap.put(Blocks.PINK_WOOL, Block.WOOL);
        blockMap.put(Blocks.GRAY_WOOL, Block.WOOL);
        blockMap.put(Blocks.LIGHT_GRAY_WOOL, Block.WOOL);
        blockMap.put(Blocks.CYAN_WOOL, Block.WOOL);
        blockMap.put(Blocks.PURPLE_WOOL, Block.WOOL);
        blockMap.put(Blocks.BLUE_WOOL, Block.WOOL);
        blockMap.put(Blocks.BROWN_WOOL, Block.WOOL);
        blockMap.put(Blocks.GREEN_WOOL, Block.WOOL);
        blockMap.put(Blocks.RED_WOOL, Block.WOOL);
        blockMap.put(Blocks.BLACK_WOOL, Block.WOOL);
        blockMap.put(Blocks.MOVING_PISTON, Block.MOVING_PISTON);
        blockMap.put(Blocks.DANDELION, Block.FLOWER);
        blockMap.put(Blocks.POPPY, Block.FLOWER);
        blockMap.put(Blocks.BLUE_ORCHID, Block.FLOWER);
        blockMap.put(Blocks.ALLIUM, Block.FLOWER);
        blockMap.put(Blocks.AZURE_BLUET, Block.FLOWER);
        blockMap.put(Blocks.RED_TULIP, Block.FLOWER);
        blockMap.put(Blocks.ORANGE_TULIP, Block.FLOWER);
        blockMap.put(Blocks.WHITE_TULIP, Block.FLOWER);
        blockMap.put(Blocks.PINK_TULIP, Block.FLOWER);
        blockMap.put(Blocks.OXEYE_DAISY, Block.FLOWER);
        blockMap.put(Blocks.CORNFLOWER, Block.FLOWER);
        blockMap.put(Blocks.WITHER_ROSE, Block.FLOWER);
        blockMap.put(Blocks.LILY_OF_THE_VALLEY, Block.FLOWER);
        blockMap.put(Blocks.BROWN_MUSHROOM, Block.BROWN_MUSHROOM);
        blockMap.put(Blocks.RED_MUSHROOM, Block.RED_MUSHROOM);
        blockMap.put(Blocks.GOLD_BLOCK, Block.GOLD_BLOCK);
        blockMap.put(Blocks.IRON_BLOCK, Block.IRON_BLOCK);
        blockMap.put(Blocks.BRICKS, Block.BRICKS);
        blockMap.put(Blocks.TNT, Block.TNT);
        blockMap.put(Blocks.BOOKSHELF, Block.BOOKSHELF);
        blockMap.put(Blocks.MOSSY_COBBLESTONE, Block.MOSSY_COBBLESTONE);
        blockMap.put(Blocks.OBSIDIAN, Block.OBSIDIAN);
        blockMap.put(Blocks.TORCH, Block.TORCH);
        blockMap.put(Blocks.WALL_TORCH, Block.TORCH);
        blockMap.put(Blocks.FIRE, Block.FIRE);
        blockMap.put(Blocks.SOUL_FIRE, Block.SOUL_FIRE);
        blockMap.put(Blocks.SPAWNER, Block.SPAWNER);
        blockMap.put(Blocks.OAK_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.CHEST, Block.CHEST);
        blockMap.put(Blocks.REDSTONE_WIRE, Block.REDSTONE_WIRE);
        blockMap.put(Blocks.DIAMOND_ORE, Block.DIAMOND_ORE);
        blockMap.put(Blocks.DEEPSLATE_DIAMOND_ORE, Block.DEEPSLATE_DIAMOND_ORE);
        blockMap.put(Blocks.DIAMOND_BLOCK, Block.DIAMOND_BLOCK);
        blockMap.put(Blocks.CRAFTING_TABLE, Block.CRAFTING_TABLE);
        blockMap.put(Blocks.WHEAT, Block.WHEAT);
        blockMap.put(Blocks.FARMLAND, Block.FARMLAND);
        blockMap.put(Blocks.FURNACE, Block.FURNACE);
        blockMap.put(Blocks.OAK_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.SPRUCE_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.BIRCH_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.ACACIA_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.JUNGLE_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.DARK_OAK_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.OAK_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.LADDER, Block.LADDER);
        blockMap.put(Blocks.RAIL, Block.RAIL);
        blockMap.put(Blocks.COBBLESTONE_STAIRS, Block.COBBLESTONE_STAIRS);
        blockMap.put(Blocks.OAK_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.SPRUCE_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.BIRCH_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.ACACIA_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.JUNGLE_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.DARK_OAK_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.LEVER, Block.LEVER);
        blockMap.put(Blocks.STONE_PRESSURE_PLATE, Block.STONE_PRESSURE_PLATE);
        blockMap.put(Blocks.IRON_DOOR, Block.IRON_DOOR);
        blockMap.put(Blocks.OAK_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.SPRUCE_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.BIRCH_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.JUNGLE_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.ACACIA_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.DARK_OAK_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.REDSTONE_ORE, Block.REDSTONE_ORE);
        blockMap.put(Blocks.DEEPSLATE_REDSTONE_ORE, Block.DEEPSLATE_REDSTONE_ORE);
        blockMap.put(Blocks.REDSTONE_TORCH, Block.REDSTONE_TORCH);
        blockMap.put(Blocks.REDSTONE_WALL_TORCH, Block.REDSTONE_TORCH);
        blockMap.put(Blocks.STONE_BUTTON, Block.STONE_BUTTON);
        blockMap.put(Blocks.SNOW, Block.SNOW);
        blockMap.put(Blocks.ICE, Block.ICE);
        blockMap.put(Blocks.SNOW_BLOCK, Block.SNOW_BLOCK);
        blockMap.put(Blocks.CACTUS, Block.CACTUS);
        blockMap.put(Blocks.CLAY, Block.CLAY);
        blockMap.put(Blocks.SUGAR_CANE, Block.SUGAR_CANE);
        blockMap.put(Blocks.JUKEBOX, Block.JUKEBOX);
        blockMap.put(Blocks.OAK_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.PUMPKIN, Block.PUMPKIN);
        blockMap.put(Blocks.NETHERRACK, Block.NETHERRACK);
        blockMap.put(Blocks.SOUL_SAND, Block.SOUL_SAND);
        blockMap.put(Blocks.SOUL_SOIL, Block.SOUL_SOIL);
        blockMap.put(Blocks.BASALT, Block.BASALT);
        blockMap.put(Blocks.POLISHED_BASALT, Block.POLISHED_BASALT);
        blockMap.put(Blocks.SOUL_TORCH, Block.SOUL_TORCH);
        blockMap.put(Blocks.SOUL_WALL_TORCH, Block.SOUL_TORCH);
        blockMap.put(Blocks.GLOWSTONE, Block.GLOWSTONE);
        blockMap.put(Blocks.NETHER_PORTAL, Block.NETHER_PORTAL);
        blockMap.put(Blocks.CARVED_PUMPKIN, Block.CARVED_PUMPKIN);
        blockMap.put(Blocks.JACK_O_LANTERN, Block.JACK_O_LANTERN);
        blockMap.put(Blocks.CAKE, Block.CAKE);
        blockMap.put(Blocks.REPEATER, Block.REPEATER);
        blockMap.put(Blocks.WHITE_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.ORANGE_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.MAGENTA_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.LIGHT_BLUE_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.YELLOW_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.LIME_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.PINK_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.GRAY_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.LIGHT_GRAY_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.CYAN_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.PURPLE_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.BLUE_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.BROWN_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.GREEN_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.RED_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.BLACK_STAINED_GLASS, Block.STAINED_GLASS);
        blockMap.put(Blocks.OAK_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.SPRUCE_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.BIRCH_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.JUNGLE_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.ACACIA_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.DARK_OAK_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.STONE_BRICKS, Block.STONE_BRICKS);
        blockMap.put(Blocks.MOSSY_STONE_BRICKS, Block.STONE_BRICKS);
        blockMap.put(Blocks.CRACKED_STONE_BRICKS, Block.STONE_BRICKS);
        blockMap.put(Blocks.CHISELED_STONE_BRICKS, Block.STONE_BRICKS);
        blockMap.put(Blocks.INFESTED_STONE, Block.INFESTED_STONE);
        blockMap.put(Blocks.INFESTED_COBBLESTONE, Block.INFESTED_STONE);
        blockMap.put(Blocks.INFESTED_STONE_BRICKS, Block.INFESTED_STONE);
        blockMap.put(Blocks.INFESTED_MOSSY_STONE_BRICKS, Block.INFESTED_STONE);
        blockMap.put(Blocks.INFESTED_CRACKED_STONE_BRICKS, Block.INFESTED_STONE);
        blockMap.put(Blocks.INFESTED_CHISELED_STONE_BRICKS, Block.INFESTED_STONE);
        blockMap.put(Blocks.BROWN_MUSHROOM_BLOCK, Block.MUSHROOM_BLOCK);
        blockMap.put(Blocks.RED_MUSHROOM_BLOCK, Block.MUSHROOM_BLOCK);
        blockMap.put(Blocks.MUSHROOM_STEM, Block.MUSHROOM_BLOCK);
        blockMap.put(Blocks.IRON_BARS, Block.IRON_BARS);
        blockMap.put(Blocks.CHAIN, Block.CHAIN);
        blockMap.put(Blocks.GLASS_PANE, Block.GLASS_PANE);
        blockMap.put(Blocks.MELON, Block.MELON);
        blockMap.put(Blocks.ATTACHED_PUMPKIN_STEM, Block.PUMPKIN_STEM);
        blockMap.put(Blocks.ATTACHED_MELON_STEM, Block.MELON_STEM);
        blockMap.put(Blocks.PUMPKIN_STEM, Block.PUMPKIN_STEM);
        blockMap.put(Blocks.MELON_STEM, Block.MELON_STEM);
        blockMap.put(Blocks.VINE, Block.VINE);
        blockMap.put(Blocks.GLOW_LICHEN, Block.GLOW_LICHEN);
        blockMap.put(Blocks.OAK_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.BRICK_STAIRS, Block.BRICK_STAIRS);
        blockMap.put(Blocks.STONE_BRICK_STAIRS, Block.STONE_BRICK_STAIRS);
        blockMap.put(Blocks.MYCELIUM, Block.DIRT);
        blockMap.put(Blocks.LILY_PAD, Block.LILY_PAD);
        blockMap.put(Blocks.NETHER_BRICKS, Block.NETHER_BRICKS);
        blockMap.put(Blocks.NETHER_BRICK_FENCE, Block.NETHER_BRICK_FENCE);
        blockMap.put(Blocks.NETHER_BRICK_STAIRS, Block.NETHER_BRICK_STAIRS);
        blockMap.put(Blocks.NETHER_WART, Block.NETHER_WART);
        blockMap.put(Blocks.ENCHANTING_TABLE, Block.ENCHANTING_TABLE);
        blockMap.put(Blocks.BREWING_STAND, Block.BREWING_STAND);
        blockMap.put(Blocks.CAULDRON, Block.CAULDRON);
        blockMap.put(Blocks.WATER_CAULDRON, Block.CAULDRON);
        blockMap.put(Blocks.LAVA_CAULDRON, Block.CAULDRON);
        blockMap.put(Blocks.POWDER_SNOW_CAULDRON, Block.CAULDRON);
        blockMap.put(Blocks.END_PORTAL, Block.END_PORTAL);
        blockMap.put(Blocks.END_PORTAL_FRAME, Block.END_PORTAL_FRAME);
        blockMap.put(Blocks.END_STONE, Block.END_STONE);
        blockMap.put(Blocks.DRAGON_EGG, Block.DRAGON_EGG);
        blockMap.put(Blocks.REDSTONE_LAMP, Block.REDSTONE_LAMP);
        blockMap.put(Blocks.COCOA, Block.COCOA);
        blockMap.put(Blocks.SANDSTONE_STAIRS, Block.SANDSTONE_STAIRS);
        blockMap.put(Blocks.EMERALD_ORE, Block.EMERALD_ORE);
        blockMap.put(Blocks.DEEPSLATE_EMERALD_ORE, Block.DEEPSLATE_EMERALD_ORE);
        blockMap.put(Blocks.ENDER_CHEST, Block.ENDER_CHEST);
        blockMap.put(Blocks.TRIPWIRE_HOOK, Block.TRIPWIRE_HOOK);
        blockMap.put(Blocks.TRIPWIRE, Block.TRIPWIRE);
        blockMap.put(Blocks.EMERALD_BLOCK, Block.EMERALD_BLOCK);
        blockMap.put(Blocks.SPRUCE_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.BIRCH_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.JUNGLE_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.COMMAND_BLOCK, Block.COMMAND_BLOCK);
        blockMap.put(Blocks.BEACON, Block.BEACON);
        blockMap.put(Blocks.COBBLESTONE_WALL, Block.COBBLESTONE_WALL);
        blockMap.put(Blocks.MOSSY_COBBLESTONE_WALL, Block.COBBLESTONE_WALL);
        blockMap.put(Blocks.FLOWER_POT, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_OAK_SAPLING, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_SPRUCE_SAPLING, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_BIRCH_SAPLING, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_JUNGLE_SAPLING, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_ACACIA_SAPLING, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_DARK_OAK_SAPLING, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_FERN, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_DANDELION, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_POPPY, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_BLUE_ORCHID, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_ALLIUM, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_AZURE_BLUET, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_RED_TULIP, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_ORANGE_TULIP, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_WHITE_TULIP, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_PINK_TULIP, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_OXEYE_DAISY, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_CORNFLOWER, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_LILY_OF_THE_VALLEY, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_WITHER_ROSE, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_RED_MUSHROOM, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_BROWN_MUSHROOM, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_DEAD_BUSH, Block.FLOWER_POT);
        blockMap.put(Blocks.POTTED_CACTUS, Block.FLOWER_POT);
        blockMap.put(Blocks.CARROTS, Block.CARROTS);
        blockMap.put(Blocks.POTATOES, Block.POTATOES);
        blockMap.put(Blocks.OAK_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.SPRUCE_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.BIRCH_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.JUNGLE_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.ACACIA_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.DARK_OAK_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.SKELETON_SKULL, Block.SKULL);
        blockMap.put(Blocks.SKELETON_WALL_SKULL, Block.SKULL);
        blockMap.put(Blocks.WITHER_SKELETON_SKULL, Block.SKULL);
        blockMap.put(Blocks.WITHER_SKELETON_WALL_SKULL, Block.SKULL);
        blockMap.put(Blocks.ZOMBIE_HEAD, Block.SKULL);
        blockMap.put(Blocks.ZOMBIE_WALL_HEAD, Block.SKULL);
        blockMap.put(Blocks.PLAYER_HEAD, Block.SKULL);
        blockMap.put(Blocks.PLAYER_WALL_HEAD, Block.SKULL);
        blockMap.put(Blocks.CREEPER_HEAD, Block.SKULL);
        blockMap.put(Blocks.CREEPER_WALL_HEAD, Block.SKULL);
        blockMap.put(Blocks.DRAGON_HEAD, Block.SKULL);
        blockMap.put(Blocks.DRAGON_WALL_HEAD, Block.SKULL);
        blockMap.put(Blocks.ANVIL, Block.ANVIL);
        blockMap.put(Blocks.CHIPPED_ANVIL, Block.ANVIL);
        blockMap.put(Blocks.DAMAGED_ANVIL, Block.ANVIL);
        blockMap.put(Blocks.TRAPPED_CHEST, Block.TRAPPED_CHEST);
        blockMap.put(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Block.LIGHT_WEIGHTED_PRESSURE_PLATE);
        blockMap.put(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE, Block.HEAVY_WEIGHTED_PRESSURE_PLATE);
        blockMap.put(Blocks.COMPARATOR, Block.COMPARATOR);
        blockMap.put(Blocks.DAYLIGHT_DETECTOR, Block.DAYLIGHT_DETECTOR);
        blockMap.put(Blocks.REDSTONE_BLOCK, Block.REDSTONE_BLOCK);
        blockMap.put(Blocks.NETHER_QUARTZ_ORE, Block.NETHER_QUARTZ_ORE);
        blockMap.put(Blocks.HOPPER, Block.HOPPER);
        blockMap.put(Blocks.QUARTZ_BLOCK, Block.QUARTZ);
        blockMap.put(Blocks.CHISELED_QUARTZ_BLOCK, Block.QUARTZ);
        blockMap.put(Blocks.QUARTZ_PILLAR, Block.QUARTZ);
        blockMap.put(Blocks.QUARTZ_STAIRS, Block.QUARTZ_STAIRS);
        blockMap.put(Blocks.ACTIVATOR_RAIL, Block.ACTIVATOR_RAIL);
        blockMap.put(Blocks.DROPPER, Block.DROPPER);
        blockMap.put(Blocks.WHITE_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.ORANGE_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.MAGENTA_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.LIGHT_BLUE_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.YELLOW_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.LIME_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.PINK_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.GRAY_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.LIGHT_GRAY_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.CYAN_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.PURPLE_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.BLUE_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.BROWN_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.GREEN_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.RED_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.BLACK_TERRACOTTA, Block.STAINED_TERRACOTTA);
        blockMap.put(Blocks.WHITE_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.ORANGE_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.MAGENTA_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.LIGHT_BLUE_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.YELLOW_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.LIME_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.PINK_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.GRAY_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.LIGHT_GRAY_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.CYAN_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.PURPLE_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.BLUE_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.BROWN_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.GREEN_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.RED_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.BLACK_STAINED_GLASS_PANE, Block.STAINED_GLASS_PANE);
        blockMap.put(Blocks.ACACIA_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.DARK_OAK_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.SLIME_BLOCK, Block.SLIME_BLOCK);
        blockMap.put(Blocks.BARRIER, Block.BARRIER);
        blockMap.put(Blocks.LIGHT, Block.LIGHT);
        blockMap.put(Blocks.IRON_TRAPDOOR, Block.IRON_TRAPDOOR);
        blockMap.put(Blocks.PRISMARINE, Block.PRISMARINE);
        blockMap.put(Blocks.PRISMARINE_BRICKS, Block.PRISMARINE);
        blockMap.put(Blocks.DARK_PRISMARINE, Block.PRISMARINE);
        blockMap.put(Blocks.PRISMARINE_STAIRS, Block.PRISMARINE_STAIRS);
        blockMap.put(Blocks.PRISMARINE_BRICK_STAIRS, Block.PRISMARINE_BRICK_STAIRS);
        blockMap.put(Blocks.DARK_PRISMARINE_STAIRS, Block.DARK_PRISMARINE_STAIRS);
        blockMap.put(Blocks.PRISMARINE_SLAB, Block.PRISMARINE_SLAB);
        blockMap.put(Blocks.PRISMARINE_BRICK_SLAB, Block.PRISMARINE_BRICK_SLAB);
        blockMap.put(Blocks.DARK_PRISMARINE_SLAB, Block.DARK_PRISMARINE_SLAB);
        blockMap.put(Blocks.SEA_LANTERN, Block.SEA_LANTERN);
        blockMap.put(Blocks.HAY_BLOCK, Block.HAY_BLOCK);
        blockMap.put(Blocks.WHITE_CARPET, Block.CARPET);
        blockMap.put(Blocks.ORANGE_CARPET, Block.CARPET);
        blockMap.put(Blocks.MAGENTA_CARPET, Block.CARPET);
        blockMap.put(Blocks.LIGHT_BLUE_CARPET, Block.CARPET);
        blockMap.put(Blocks.YELLOW_CARPET, Block.CARPET);
        blockMap.put(Blocks.LIME_CARPET, Block.CARPET);
        blockMap.put(Blocks.PINK_CARPET, Block.CARPET);
        blockMap.put(Blocks.GRAY_CARPET, Block.CARPET);
        blockMap.put(Blocks.LIGHT_GRAY_CARPET, Block.CARPET);
        blockMap.put(Blocks.CYAN_CARPET, Block.CARPET);
        blockMap.put(Blocks.PURPLE_CARPET, Block.CARPET);
        blockMap.put(Blocks.BLUE_CARPET, Block.CARPET);
        blockMap.put(Blocks.BROWN_CARPET, Block.CARPET);
        blockMap.put(Blocks.GREEN_CARPET, Block.CARPET);
        blockMap.put(Blocks.RED_CARPET, Block.CARPET);
        blockMap.put(Blocks.BLACK_CARPET, Block.CARPET);
        blockMap.put(Blocks.TERRACOTTA, Block.TERRACOTTA);
        blockMap.put(Blocks.COAL_BLOCK, Block.COAL_BLOCK);
        blockMap.put(Blocks.PACKED_ICE, Block.PACKED_ICE);
        blockMap.put(Blocks.SUNFLOWER, Block.DOUBLE_PLANT);
        blockMap.put(Blocks.LILAC, Block.DOUBLE_PLANT);
        blockMap.put(Blocks.ROSE_BUSH, Block.DOUBLE_PLANT);
        blockMap.put(Blocks.PEONY, Block.DOUBLE_PLANT);
        blockMap.put(Blocks.TALL_GRASS, Block.DOUBLE_PLANT);
        blockMap.put(Blocks.LARGE_FERN, Block.DOUBLE_PLANT);
        blockMap.put(Blocks.WHITE_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.ORANGE_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.MAGENTA_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.LIGHT_BLUE_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.YELLOW_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.LIME_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.PINK_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.GRAY_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.LIGHT_GRAY_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.CYAN_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.PURPLE_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.BLUE_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.BROWN_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.GREEN_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.RED_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.BLACK_BANNER, Block.STANDING_BANNER);
        blockMap.put(Blocks.WHITE_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.ORANGE_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.MAGENTA_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.LIGHT_BLUE_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.YELLOW_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.LIME_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.PINK_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.GRAY_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.LIGHT_GRAY_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.CYAN_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.PURPLE_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.BLUE_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.BROWN_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.GREEN_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.RED_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.BLACK_WALL_BANNER, Block.WALL_BANNER);
        blockMap.put(Blocks.RED_SANDSTONE, Block.RED_SANDSTONE);
        blockMap.put(Blocks.CHISELED_RED_SANDSTONE, Block.RED_SANDSTONE);
        blockMap.put(Blocks.CUT_RED_SANDSTONE, Block.RED_SANDSTONE);
        blockMap.put(Blocks.RED_SANDSTONE_STAIRS, Block.RED_SANDSTONE_STAIRS);
        blockMap.put(Blocks.OAK_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.SPRUCE_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.BIRCH_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.JUNGLE_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.ACACIA_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.DARK_OAK_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.STONE_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.SMOOTH_STONE_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.SANDSTONE_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.CUT_SANDSTONE_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.PETRIFIED_OAK_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.COBBLESTONE_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.BRICK_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.STONE_BRICK_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.NETHER_BRICK_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.QUARTZ_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.RED_SANDSTONE_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.CUT_RED_SANDSTONE_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.PURPUR_SLAB, Block.STONE_SLAB);
        blockMap.put(Blocks.SMOOTH_STONE, Block.SMOOTH_STONE);
        blockMap.put(Blocks.SMOOTH_SANDSTONE, Block.SMOOTH_SANDSTONE);
        blockMap.put(Blocks.SMOOTH_QUARTZ, Block.QUARTZ);
        blockMap.put(Blocks.SMOOTH_RED_SANDSTONE, Block.SMOOTH_RED_SANDSTONE);
        blockMap.put(Blocks.SPRUCE_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.BIRCH_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.JUNGLE_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.ACACIA_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.DARK_OAK_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.SPRUCE_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.BIRCH_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.JUNGLE_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.ACACIA_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.DARK_OAK_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.SPRUCE_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.BIRCH_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.JUNGLE_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.ACACIA_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.DARK_OAK_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.END_ROD, Block.END_ROD);
        blockMap.put(Blocks.CHORUS_PLANT, Block.CHORUS_PLANT);
        blockMap.put(Blocks.CHORUS_FLOWER, Block.CHORUS_FLOWER);
        blockMap.put(Blocks.PURPUR_BLOCK, Block.PURPUR_BLOCK);
        blockMap.put(Blocks.PURPUR_PILLAR, Block.PURPUR_PILLAR);
        blockMap.put(Blocks.PURPUR_STAIRS, Block.PURPUR_STAIRS);
        blockMap.put(Blocks.END_STONE_BRICKS, Block.END_STONE_BRICKS);
        blockMap.put(Blocks.BEETROOTS, Block.BEETROOTS);
        blockMap.put(Blocks.DIRT_PATH, Block.DIRT_PATH);
        blockMap.put(Blocks.END_GATEWAY, Block.END_GATEWAY);
        blockMap.put(Blocks.REPEATING_COMMAND_BLOCK, Block.REPEATING_COMMAND_BLOCK);
        blockMap.put(Blocks.CHAIN_COMMAND_BLOCK, Block.CHAIN_COMMAND_BLOCK);
        blockMap.put(Blocks.FROSTED_ICE, Block.FROSTED_ICE);
        blockMap.put(Blocks.MAGMA_BLOCK, Block.MAGMA_BLOCK);
        blockMap.put(Blocks.NETHER_WART_BLOCK, Block.NETHER_WART_BLOCK);
        blockMap.put(Blocks.RED_NETHER_BRICKS, Block.RED_NETHER_BRICKS);
        blockMap.put(Blocks.BONE_BLOCK, Block.BONE_BLOCK);
        blockMap.put(Blocks.STRUCTURE_VOID, Block.STRUCTURE_VOID);
        blockMap.put(Blocks.OBSERVER, Block.OBSERVER);
        blockMap.put(Blocks.SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.WHITE_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.ORANGE_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.MAGENTA_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.LIGHT_BLUE_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.YELLOW_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.LIME_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.PINK_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.GRAY_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.LIGHT_GRAY_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.CYAN_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.PURPLE_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.BLUE_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.BROWN_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.GREEN_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.RED_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.BLACK_SHULKER_BOX, Block.SHULKER_BOX);
        blockMap.put(Blocks.WHITE_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.ORANGE_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.MAGENTA_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.YELLOW_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.LIME_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.PINK_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.GRAY_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.CYAN_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.PURPLE_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.BLUE_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.BROWN_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.GREEN_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.RED_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.BLACK_GLAZED_TERRACOTTA, Block.GLAZED_TERRACOTTA);
        blockMap.put(Blocks.WHITE_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.ORANGE_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.MAGENTA_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.LIGHT_BLUE_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.YELLOW_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.LIME_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.PINK_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.GRAY_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.LIGHT_GRAY_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.CYAN_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.PURPLE_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.BLUE_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.BROWN_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.GREEN_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.RED_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.BLACK_CONCRETE, Block.CONCRETE);
        blockMap.put(Blocks.WHITE_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.ORANGE_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.MAGENTA_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.LIGHT_BLUE_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.YELLOW_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.LIME_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.PINK_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.GRAY_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.LIGHT_GRAY_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.CYAN_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.PURPLE_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.BLUE_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.BROWN_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.GREEN_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.RED_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.BLACK_CONCRETE_POWDER, Block.CONCRETE_POWDER);
        blockMap.put(Blocks.KELP, Block.KELP);
        blockMap.put(Blocks.KELP_PLANT, Block.KELP_PLANT);
        blockMap.put(Blocks.DRIED_KELP_BLOCK, Block.DRIED_KELP_BLOCK);
        blockMap.put(Blocks.TURTLE_EGG, Block.TURTLE_EGG);
        blockMap.put(Blocks.DEAD_TUBE_CORAL_BLOCK, Block.DEAD_TUBE_CORAL_BLOCK);
        blockMap.put(Blocks.DEAD_BRAIN_CORAL_BLOCK, Block.DEAD_BRAIN_CORAL_BLOCK);
        blockMap.put(Blocks.DEAD_BUBBLE_CORAL_BLOCK, Block.DEAD_BUBBLE_CORAL_BLOCK);
        blockMap.put(Blocks.DEAD_FIRE_CORAL_BLOCK, Block.DEAD_FIRE_CORAL_BLOCK);
        blockMap.put(Blocks.DEAD_HORN_CORAL_BLOCK, Block.DEAD_HORN_CORAL_BLOCK);
        blockMap.put(Blocks.TUBE_CORAL_BLOCK, Block.TUBE_CORAL_BLOCK);
        blockMap.put(Blocks.BRAIN_CORAL_BLOCK, Block.BRAIN_CORAL_BLOCK);
        blockMap.put(Blocks.BUBBLE_CORAL_BLOCK, Block.BUBBLE_CORAL_BLOCK);
        blockMap.put(Blocks.FIRE_CORAL_BLOCK, Block.FIRE_CORAL_BLOCK);
        blockMap.put(Blocks.HORN_CORAL_BLOCK, Block.HORN_CORAL_BLOCK);
        blockMap.put(Blocks.DEAD_TUBE_CORAL, Block.DEAD_TUBE_CORAL);
        blockMap.put(Blocks.DEAD_BRAIN_CORAL, Block.DEAD_BRAIN_CORAL);
        blockMap.put(Blocks.DEAD_BUBBLE_CORAL, Block.DEAD_BUBBLE_CORAL);
        blockMap.put(Blocks.DEAD_FIRE_CORAL, Block.DEAD_FIRE_CORAL);
        blockMap.put(Blocks.DEAD_HORN_CORAL, Block.DEAD_HORN_CORAL);
        blockMap.put(Blocks.TUBE_CORAL, Block.TUBE_CORAL);
        blockMap.put(Blocks.BRAIN_CORAL, Block.BRAIN_CORAL);
        blockMap.put(Blocks.BUBBLE_CORAL, Block.BUBBLE_CORAL);
        blockMap.put(Blocks.FIRE_CORAL, Block.FIRE_CORAL);
        blockMap.put(Blocks.HORN_CORAL, Block.HORN_CORAL);
        blockMap.put(Blocks.DEAD_TUBE_CORAL_FAN, Block.DEAD_TUBE_CORAL_FAN);
        blockMap.put(Blocks.DEAD_BRAIN_CORAL_FAN, Block.DEAD_BRAIN_CORAL_FAN);
        blockMap.put(Blocks.DEAD_BUBBLE_CORAL_FAN, Block.DEAD_BUBBLE_CORAL_FAN);
        blockMap.put(Blocks.DEAD_FIRE_CORAL_FAN, Block.DEAD_FIRE_CORAL_FAN);
        blockMap.put(Blocks.DEAD_HORN_CORAL_FAN, Block.DEAD_HORN_CORAL_FAN);
        blockMap.put(Blocks.TUBE_CORAL_FAN, Block.TUBE_CORAL_FAN);
        blockMap.put(Blocks.BRAIN_CORAL_FAN, Block.BRAIN_CORAL_FAN);
        blockMap.put(Blocks.BUBBLE_CORAL_FAN, Block.BUBBLE_CORAL_FAN);
        blockMap.put(Blocks.FIRE_CORAL_FAN, Block.FIRE_CORAL_FAN);
        blockMap.put(Blocks.HORN_CORAL_FAN, Block.HORN_CORAL_FAN);
        blockMap.put(Blocks.DEAD_TUBE_CORAL_WALL_FAN, Block.DEAD_TUBE_CORAL_WALL_FAN);
        blockMap.put(Blocks.DEAD_BRAIN_CORAL_WALL_FAN, Block.DEAD_BRAIN_CORAL_WALL_FAN);
        blockMap.put(Blocks.DEAD_BUBBLE_CORAL_WALL_FAN, Block.DEAD_BUBBLE_CORAL_WALL_FAN);
        blockMap.put(Blocks.DEAD_FIRE_CORAL_WALL_FAN, Block.DEAD_FIRE_CORAL_WALL_FAN);
        blockMap.put(Blocks.DEAD_HORN_CORAL_WALL_FAN, Block.DEAD_HORN_CORAL_WALL_FAN);
        blockMap.put(Blocks.TUBE_CORAL_WALL_FAN, Block.TUBE_CORAL_WALL_FAN);
        blockMap.put(Blocks.BRAIN_CORAL_WALL_FAN, Block.BRAIN_CORAL_WALL_FAN);
        blockMap.put(Blocks.BUBBLE_CORAL_WALL_FAN, Block.BUBBLE_CORAL_WALL_FAN);
        blockMap.put(Blocks.FIRE_CORAL_WALL_FAN, Block.FIRE_CORAL_WALL_FAN);
        blockMap.put(Blocks.HORN_CORAL_WALL_FAN, Block.HORN_CORAL_WALL_FAN);
        blockMap.put(Blocks.SEA_PICKLE, Block.SEA_PICKLE);
        blockMap.put(Blocks.BLUE_ICE, Block.BLUE_ICE);
        blockMap.put(Blocks.CONDUIT, Block.CONDUIT);
        blockMap.put(Blocks.BAMBOO_SAPLING, Block.BAMBOO_SAPLING);
        blockMap.put(Blocks.BAMBOO, Block.BAMBOO);
        blockMap.put(Blocks.POTTED_BAMBOO, Block.POTTED_BAMBOO);
        blockMap.put(Blocks.VOID_AIR, Block.VOID_AIR);
        blockMap.put(Blocks.CAVE_AIR, Block.CAVE_AIR);
        blockMap.put(Blocks.BUBBLE_COLUMN, Block.BUBBLE_COLUMN);
        blockMap.put(Blocks.POLISHED_GRANITE_STAIRS, Block.POLISHED_GRANITE_STAIRS);
        blockMap.put(Blocks.SMOOTH_RED_SANDSTONE_STAIRS, Block.SMOOTH_RED_SANDSTONE_STAIRS);
        blockMap.put(Blocks.MOSSY_STONE_BRICK_STAIRS, Block.MOSSY_STONE_BRICK_STAIRS);
        blockMap.put(Blocks.POLISHED_DIORITE_STAIRS, Block.POLISHED_DIORITE_STAIRS);
        blockMap.put(Blocks.MOSSY_COBBLESTONE_STAIRS, Block.MOSSY_COBBLESTONE_STAIRS);
        blockMap.put(Blocks.END_STONE_BRICK_STAIRS, Block.END_STONE_BRICK_STAIRS);
        blockMap.put(Blocks.STONE_STAIRS, Block.STONE_STAIRS);
        blockMap.put(Blocks.SMOOTH_SANDSTONE_STAIRS, Block.SMOOTH_SANDSTONE_STAIRS);
        blockMap.put(Blocks.SMOOTH_QUARTZ_STAIRS, Block.SMOOTH_QUARTZ_STAIRS);
        blockMap.put(Blocks.GRANITE_STAIRS, Block.GRANITE_STAIRS);
        blockMap.put(Blocks.ANDESITE_STAIRS, Block.ANDESITE_STAIRS);
        blockMap.put(Blocks.RED_NETHER_BRICK_STAIRS, Block.RED_NETHER_BRICK_STAIRS);
        blockMap.put(Blocks.POLISHED_ANDESITE_STAIRS, Block.POLISHED_ANDESITE_STAIRS);
        blockMap.put(Blocks.DIORITE_STAIRS, Block.DIORITE_STAIRS);
        blockMap.put(Blocks.POLISHED_GRANITE_SLAB, Block.POLISHED_GRANITE_SLAB);
        blockMap.put(Blocks.SMOOTH_RED_SANDSTONE_SLAB, Block.SMOOTH_RED_SANDSTONE_SLAB);
        blockMap.put(Blocks.MOSSY_STONE_BRICK_SLAB, Block.MOSSY_STONE_BRICK_SLAB);
        blockMap.put(Blocks.POLISHED_DIORITE_SLAB, Block.POLISHED_DIORITE_SLAB);
        blockMap.put(Blocks.MOSSY_COBBLESTONE_SLAB, Block.MOSSY_COBBLESTONE_SLAB);
        blockMap.put(Blocks.END_STONE_BRICK_SLAB, Block.END_STONE_BRICK_SLAB);
        blockMap.put(Blocks.SMOOTH_SANDSTONE_SLAB, Block.SMOOTH_SANDSTONE_SLAB);
        blockMap.put(Blocks.SMOOTH_QUARTZ_SLAB, Block.SMOOTH_QUARTZ_SLAB);
        blockMap.put(Blocks.GRANITE_SLAB, Block.GRANITE_SLAB);
        blockMap.put(Blocks.ANDESITE_SLAB, Block.ANDESITE_SLAB);
        blockMap.put(Blocks.RED_NETHER_BRICK_SLAB, Block.RED_NETHER_BRICK_SLAB);
        blockMap.put(Blocks.POLISHED_ANDESITE_SLAB, Block.POLISHED_ANDESITE_SLAB);
        blockMap.put(Blocks.DIORITE_SLAB, Block.DIORITE_SLAB);
        blockMap.put(Blocks.BRICK_WALL, Block.BRICK_WALL);
        blockMap.put(Blocks.PRISMARINE_WALL, Block.PRISMARINE_WALL);
        blockMap.put(Blocks.RED_SANDSTONE_WALL, Block.RED_SANDSTONE_WALL);
        blockMap.put(Blocks.MOSSY_STONE_BRICK_WALL, Block.MOSSY_STONE_BRICK_WALL);
        blockMap.put(Blocks.GRANITE_WALL, Block.GRANITE_WALL);
        blockMap.put(Blocks.STONE_BRICK_WALL, Block.STONE_BRICK_WALL);
        blockMap.put(Blocks.NETHER_BRICK_WALL, Block.NETHER_BRICK_WALL);
        blockMap.put(Blocks.ANDESITE_WALL, Block.ANDESITE_WALL);
        blockMap.put(Blocks.RED_NETHER_BRICK_WALL, Block.RED_NETHER_BRICK_WALL);
        blockMap.put(Blocks.SANDSTONE_WALL, Block.SANDSTONE_WALL);
        blockMap.put(Blocks.END_STONE_BRICK_WALL, Block.END_STONE_BRICK_WALL);
        blockMap.put(Blocks.DIORITE_WALL, Block.DIORITE_WALL);
        blockMap.put(Blocks.SCAFFOLDING, Block.SCAFFOLDING);
        blockMap.put(Blocks.LOOM, Block.LOOM);
        blockMap.put(Blocks.BARREL, Block.BARREL);
        blockMap.put(Blocks.SMOKER, Block.SMOKER);
        blockMap.put(Blocks.BLAST_FURNACE, Block.BLAST_FURNACE);
        blockMap.put(Blocks.CARTOGRAPHY_TABLE, Block.CARTOGRAPHY_TABLE);
        blockMap.put(Blocks.FLETCHING_TABLE, Block.FLETCHING_TABLE);
        blockMap.put(Blocks.GRINDSTONE, Block.GRINDSTONE);
        blockMap.put(Blocks.LECTERN, Block.LECTERN);
        blockMap.put(Blocks.SMITHING_TABLE, Block.SMITHING_TABLE);
        blockMap.put(Blocks.STONECUTTER, Block.STONECUTTER);
        blockMap.put(Blocks.BELL, Block.BELL);
        blockMap.put(Blocks.LANTERN, Block.LANTERN);
        blockMap.put(Blocks.SOUL_LANTERN, Block.SOUL_LANTERN);
        blockMap.put(Blocks.CAMPFIRE, Block.CAMPFIRE);
        blockMap.put(Blocks.SOUL_CAMPFIRE, Block.SOUL_CAMPFIRE);
        blockMap.put(Blocks.SWEET_BERRY_BUSH, Block.SWEET_BERRY_BUSH);
        blockMap.put(Blocks.WARPED_STEM, Block.WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_WARPED_STEM, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.WARPED_HYPHAE, Block.WARPED_HYPHAE);
        blockMap.put(Blocks.STRIPPED_WARPED_HYPHAE, Block.STRIPPED_WARPED_HYPHAE);
        blockMap.put(Blocks.WARPED_NYLIUM, Block.WARPED_NYLIUM);
        blockMap.put(Blocks.WARPED_FUNGUS, Block.WOOD_SAPLING);
        blockMap.put(Blocks.WARPED_WART_BLOCK, Block.WARPED_WART_BLOCK);
        blockMap.put(Blocks.WARPED_ROOTS, Block.WARPED_ROOTS);
        blockMap.put(Blocks.NETHER_SPROUTS, Block.NETHER_SPROUTS);
        blockMap.put(Blocks.CRIMSON_STEM, Block.WOOD_LOG);
        blockMap.put(Blocks.STRIPPED_CRIMSON_STEM, Block.STRIPPED_WOOD_LOG);
        blockMap.put(Blocks.CRIMSON_HYPHAE, Block.CRIMSON_HYPHAE);
        blockMap.put(Blocks.STRIPPED_CRIMSON_HYPHAE, Block.STRIPPED_CRIMSON_HYPHAE);
        blockMap.put(Blocks.CRIMSON_NYLIUM, Block.CRIMSON_NYLIUM);
        blockMap.put(Blocks.CRIMSON_FUNGUS, Block.WOOD_SAPLING);
        blockMap.put(Blocks.SHROOMLIGHT, Block.SHROOMLIGHT);
        blockMap.put(Blocks.WEEPING_VINES, Block.WEEPING_VINES);
        blockMap.put(Blocks.WEEPING_VINES_PLANT, Block.WEEPING_VINES_PLANT);
        blockMap.put(Blocks.TWISTING_VINES, Block.TWISTING_VINES);
        blockMap.put(Blocks.TWISTING_VINES_PLANT, Block.TWISTING_VINES_PLANT);
        blockMap.put(Blocks.CRIMSON_ROOTS, Block.CRIMSON_ROOTS);
        blockMap.put(Blocks.CRIMSON_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.WARPED_PLANKS, Block.WOOD_PLANKS);
        blockMap.put(Blocks.CRIMSON_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.WARPED_SLAB, Block.WOOD_SLAB);
        blockMap.put(Blocks.CRIMSON_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.WARPED_PRESSURE_PLATE, Block.WOOD_PRESSURE_PLATE);
        blockMap.put(Blocks.CRIMSON_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.WARPED_FENCE, Block.WOOD_FENCE);
        blockMap.put(Blocks.CRIMSON_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.WARPED_TRAPDOOR, Block.WOOD_TRAPDOOR);
        blockMap.put(Blocks.CRIMSON_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.WARPED_FENCE_GATE, Block.WOOD_FENCE_GATE);
        blockMap.put(Blocks.CRIMSON_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.WARPED_STAIRS, Block.WOOD_STAIRS);
        blockMap.put(Blocks.CRIMSON_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.WARPED_BUTTON, Block.WOOD_BUTTON);
        blockMap.put(Blocks.CRIMSON_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.WARPED_DOOR, Block.WOOD_DOOR);
        blockMap.put(Blocks.CRIMSON_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.WARPED_SIGN, Block.WOOD_SIGN);
        blockMap.put(Blocks.CRIMSON_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.WARPED_WALL_SIGN, Block.WOOD_WALL_SIGN);
        blockMap.put(Blocks.STRUCTURE_BLOCK, Block.STRUCTURE_BLOCK);
        blockMap.put(Blocks.JIGSAW, Block.JIGSAW);
        blockMap.put(Blocks.COMPOSTER, Block.COMPOSTER);
        blockMap.put(Blocks.TARGET, Block.TARGET);
        blockMap.put(Blocks.BEE_NEST, Block.BEE_NEST);
        blockMap.put(Blocks.BEEHIVE, Block.BEEHIVE);
        blockMap.put(Blocks.HONEY_BLOCK, Block.HONEY_BLOCK);
        blockMap.put(Blocks.HONEYCOMB_BLOCK, Block.HONEYCOMB_BLOCK);
        blockMap.put(Blocks.NETHERITE_BLOCK, Block.NETHERITE_BLOCK);
        blockMap.put(Blocks.ANCIENT_DEBRIS, Block.ANCIENT_DEBRIS);
        blockMap.put(Blocks.CRYING_OBSIDIAN, Block.CRYING_OBSIDIAN);
        blockMap.put(Blocks.RESPAWN_ANCHOR, Block.RESPAWN_ANCHOR);
        blockMap.put(Blocks.POTTED_CRIMSON_FUNGUS, Block.POTTED_CRIMSON_FUNGUS);
        blockMap.put(Blocks.POTTED_WARPED_FUNGUS, Block.POTTED_WARPED_FUNGUS);
        blockMap.put(Blocks.POTTED_CRIMSON_ROOTS, Block.POTTED_CRIMSON_ROOTS);
        blockMap.put(Blocks.POTTED_WARPED_ROOTS, Block.POTTED_WARPED_ROOTS);
        blockMap.put(Blocks.LODESTONE, Block.LODESTONE);
        blockMap.put(Blocks.BLACKSTONE, Block.BLACKSTONE);
        blockMap.put(Blocks.BLACKSTONE_STAIRS, Block.BLACKSTONE_STAIRS);
        blockMap.put(Blocks.BLACKSTONE_WALL, Block.BLACKSTONE_WALL);
        blockMap.put(Blocks.BLACKSTONE_SLAB, Block.BLACKSTONE_SLAB);
        blockMap.put(Blocks.POLISHED_BLACKSTONE, Block.POLISHED_BLACKSTONE);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_BRICKS, Block.POLISHED_BLACKSTONE_BRICKS);
        blockMap.put(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS, Block.CRACKED_POLISHED_BLACKSTONE_BRICKS);
        blockMap.put(Blocks.CHISELED_POLISHED_BLACKSTONE, Block.CHISELED_POLISHED_BLACKSTONE);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Block.POLISHED_BLACKSTONE_BRICK_SLAB);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Block.POLISHED_BLACKSTONE_BRICK_STAIRS);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Block.POLISHED_BLACKSTONE_BRICK_WALL);
        blockMap.put(Blocks.GILDED_BLACKSTONE, Block.GILDED_BLACKSTONE);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_STAIRS, Block.POLISHED_BLACKSTONE_STAIRS);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_SLAB, Block.POLISHED_BLACKSTONE_SLAB);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_PRESSURE_PLATE, Block.POLISHED_BLACKSTONE_PRESSURE_PLATE);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_BUTTON, Block.POLISHED_BLACKSTONE_BUTTON);
        blockMap.put(Blocks.POLISHED_BLACKSTONE_WALL, Block.POLISHED_BLACKSTONE_WALL);
        blockMap.put(Blocks.CHISELED_NETHER_BRICKS, Block.CHISELED_NETHER_BRICKS);
        blockMap.put(Blocks.CRACKED_NETHER_BRICKS, Block.CRACKED_NETHER_BRICKS);
        blockMap.put(Blocks.QUARTZ_BRICKS, Block.QUARTZ_BRICKS);
        blockMap.put(Blocks.CANDLE, Block.CANDLE);
        blockMap.put(Blocks.WHITE_CANDLE, Block.WHITE_CANDLE);
        blockMap.put(Blocks.ORANGE_CANDLE, Block.ORANGE_CANDLE);
        blockMap.put(Blocks.MAGENTA_CANDLE, Block.MAGENTA_CANDLE);
        blockMap.put(Blocks.LIGHT_BLUE_CANDLE, Block.LIGHT_BLUE_CANDLE);
        blockMap.put(Blocks.YELLOW_CANDLE, Block.YELLOW_CANDLE);
        blockMap.put(Blocks.LIME_CANDLE, Block.LIME_CANDLE);
        blockMap.put(Blocks.PINK_CANDLE, Block.PINK_CANDLE);
        blockMap.put(Blocks.GRAY_CANDLE, Block.GRAY_CANDLE);
        blockMap.put(Blocks.LIGHT_GRAY_CANDLE, Block.LIGHT_GRAY_CANDLE);
        blockMap.put(Blocks.CYAN_CANDLE, Block.CYAN_CANDLE);
        blockMap.put(Blocks.PURPLE_CANDLE, Block.PURPLE_CANDLE);
        blockMap.put(Blocks.BLUE_CANDLE, Block.BLUE_CANDLE);
        blockMap.put(Blocks.BROWN_CANDLE, Block.BROWN_CANDLE);
        blockMap.put(Blocks.GREEN_CANDLE, Block.GREEN_CANDLE);
        blockMap.put(Blocks.RED_CANDLE, Block.RED_CANDLE);
        blockMap.put(Blocks.BLACK_CANDLE, Block.BLACK_CANDLE);
        blockMap.put(Blocks.CANDLE_CAKE, Block.CANDLE_CAKE);
        blockMap.put(Blocks.WHITE_CANDLE_CAKE, Block.WHITE_CANDLE_CAKE);
        blockMap.put(Blocks.ORANGE_CANDLE_CAKE, Block.ORANGE_CANDLE_CAKE);
        blockMap.put(Blocks.MAGENTA_CANDLE_CAKE, Block.MAGENTA_CANDLE_CAKE);
        blockMap.put(Blocks.LIGHT_BLUE_CANDLE_CAKE, Block.LIGHT_BLUE_CANDLE_CAKE);
        blockMap.put(Blocks.YELLOW_CANDLE_CAKE, Block.YELLOW_CANDLE_CAKE);
        blockMap.put(Blocks.LIME_CANDLE_CAKE, Block.LIME_CANDLE_CAKE);
        blockMap.put(Blocks.PINK_CANDLE_CAKE, Block.PINK_CANDLE_CAKE);
        blockMap.put(Blocks.GRAY_CANDLE_CAKE, Block.GRAY_CANDLE_CAKE);
        blockMap.put(Blocks.LIGHT_GRAY_CANDLE_CAKE, Block.LIGHT_GRAY_CANDLE_CAKE);
        blockMap.put(Blocks.CYAN_CANDLE_CAKE, Block.CYAN_CANDLE_CAKE);
        blockMap.put(Blocks.PURPLE_CANDLE_CAKE, Block.PURPLE_CANDLE_CAKE);
        blockMap.put(Blocks.BLUE_CANDLE_CAKE, Block.BLUE_CANDLE_CAKE);
        blockMap.put(Blocks.BROWN_CANDLE_CAKE, Block.BROWN_CANDLE_CAKE);
        blockMap.put(Blocks.GREEN_CANDLE_CAKE, Block.GREEN_CANDLE_CAKE);
        blockMap.put(Blocks.RED_CANDLE_CAKE, Block.RED_CANDLE_CAKE);
        blockMap.put(Blocks.BLACK_CANDLE_CAKE, Block.BLACK_CANDLE_CAKE);
        blockMap.put(Blocks.AMETHYST_BLOCK, Block.AMETHYST_BLOCK);
        blockMap.put(Blocks.BUDDING_AMETHYST, Block.BUDDING_AMETHYST);
        blockMap.put(Blocks.AMETHYST_CLUSTER, Block.AMETHYST_CLUSTER);
        blockMap.put(Blocks.LARGE_AMETHYST_BUD, Block.LARGE_AMETHYST_BUD);
        blockMap.put(Blocks.MEDIUM_AMETHYST_BUD, Block.MEDIUM_AMETHYST_BUD);
        blockMap.put(Blocks.SMALL_AMETHYST_BUD, Block.SMALL_AMETHYST_BUD);
        blockMap.put(Blocks.TUFF, Block.TUFF);
        blockMap.put(Blocks.CALCITE, Block.CALCITE);
        blockMap.put(Blocks.TINTED_GLASS, Block.TINTED_GLASS);
        blockMap.put(Blocks.POWDER_SNOW, Block.POWDER_SNOW);
        blockMap.put(Blocks.SCULK_SENSOR, Block.SCULK_SENSOR);
        blockMap.put(Blocks.OXIDIZED_COPPER, Block.OXIDIZED_COPPER);
        blockMap.put(Blocks.WEATHERED_COPPER, Block.WEATHERED_COPPER);
        blockMap.put(Blocks.EXPOSED_COPPER, Block.EXPOSED_COPPER);
        blockMap.put(Blocks.COPPER_BLOCK, Block.COPPER_BLOCK);
        blockMap.put(Blocks.COPPER_ORE, Block.COPPER_ORE);
        blockMap.put(Blocks.DEEPSLATE_COPPER_ORE, Block.DEEPSLATE_COPPER_ORE);
        blockMap.put(Blocks.OXIDIZED_CUT_COPPER, Block.OXIDIZED_CUT_COPPER);
        blockMap.put(Blocks.WEATHERED_CUT_COPPER, Block.WEATHERED_CUT_COPPER);
        blockMap.put(Blocks.EXPOSED_CUT_COPPER, Block.EXPOSED_CUT_COPPER);
        blockMap.put(Blocks.CUT_COPPER, Block.CUT_COPPER);
        blockMap.put(Blocks.OXIDIZED_CUT_COPPER_STAIRS, Block.OXIDIZED_CUT_COPPER_STAIRS);
        blockMap.put(Blocks.WEATHERED_CUT_COPPER_STAIRS, Block.WEATHERED_CUT_COPPER_STAIRS);
        blockMap.put(Blocks.EXPOSED_CUT_COPPER_STAIRS, Block.EXPOSED_CUT_COPPER_STAIRS);
        blockMap.put(Blocks.CUT_COPPER_STAIRS, Block.CUT_COPPER_STAIRS);
        blockMap.put(Blocks.OXIDIZED_CUT_COPPER_SLAB, Block.OXIDIZED_CUT_COPPER_SLAB);
        blockMap.put(Blocks.WEATHERED_CUT_COPPER_SLAB, Block.WEATHERED_CUT_COPPER_SLAB);
        blockMap.put(Blocks.EXPOSED_CUT_COPPER_SLAB, Block.EXPOSED_CUT_COPPER_SLAB);
        blockMap.put(Blocks.CUT_COPPER_SLAB, Block.CUT_COPPER_SLAB);
        blockMap.put(Blocks.WAXED_COPPER_BLOCK, Block.WAXED_COPPER_BLOCK);
        blockMap.put(Blocks.WAXED_WEATHERED_COPPER, Block.WAXED_WEATHERED_COPPER);
        blockMap.put(Blocks.WAXED_EXPOSED_COPPER, Block.WAXED_EXPOSED_COPPER);
        blockMap.put(Blocks.WAXED_OXIDIZED_COPPER, Block.WAXED_OXIDIZED_COPPER);
        blockMap.put(Blocks.WAXED_OXIDIZED_CUT_COPPER, Block.WAXED_OXIDIZED_CUT_COPPER);
        blockMap.put(Blocks.WAXED_WEATHERED_CUT_COPPER, Block.WAXED_WEATHERED_CUT_COPPER);
        blockMap.put(Blocks.WAXED_EXPOSED_CUT_COPPER, Block.WAXED_EXPOSED_CUT_COPPER);
        blockMap.put(Blocks.WAXED_CUT_COPPER, Block.WAXED_CUT_COPPER);
        blockMap.put(Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS, Block.WAXED_OXIDIZED_CUT_COPPER_STAIRS);
        blockMap.put(Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS, Block.WAXED_WEATHERED_CUT_COPPER_STAIRS);
        blockMap.put(Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS, Block.WAXED_EXPOSED_CUT_COPPER_STAIRS);
        blockMap.put(Blocks.WAXED_CUT_COPPER_STAIRS, Block.WAXED_CUT_COPPER_STAIRS);
        blockMap.put(Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB, Block.WAXED_OXIDIZED_CUT_COPPER_SLAB);
        blockMap.put(Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, Block.WAXED_WEATHERED_CUT_COPPER_SLAB);
        blockMap.put(Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, Block.WAXED_EXPOSED_CUT_COPPER_SLAB);
        blockMap.put(Blocks.WAXED_CUT_COPPER_SLAB, Block.WAXED_CUT_COPPER_SLAB);
        blockMap.put(Blocks.LIGHTNING_ROD, Block.LIGHTNING_ROD);
        blockMap.put(Blocks.POINTED_DRIPSTONE, Block.POINTED_DRIPSTONE);
        blockMap.put(Blocks.DRIPSTONE_BLOCK, Block.DRIPSTONE_BLOCK);
        blockMap.put(Blocks.CAVE_VINES, Block.CAVE_VINES);
        blockMap.put(Blocks.CAVE_VINES_PLANT, Block.CAVE_VINES_PLANT);
        blockMap.put(Blocks.SPORE_BLOSSOM, Block.SPORE_BLOSSOM);
        blockMap.put(Blocks.AZALEA, Block.AZALEA);
        blockMap.put(Blocks.FLOWERING_AZALEA, Block.FLOWERING_AZALEA);
        blockMap.put(Blocks.MOSS_CARPET, Block.MOSS_CARPET);
        blockMap.put(Blocks.MOSS_BLOCK, Block.MOSS_BLOCK);
        blockMap.put(Blocks.BIG_DRIPLEAF, Block.BIG_DRIPLEAF);
        blockMap.put(Blocks.BIG_DRIPLEAF_STEM, Block.BIG_DRIPLEAF_STEM);
        blockMap.put(Blocks.SMALL_DRIPLEAF, Block.SMALL_DRIPLEAF);
        blockMap.put(Blocks.HANGING_ROOTS, Block.HANGING_ROOTS);
        blockMap.put(Blocks.ROOTED_DIRT, Block.ROOTED_DIRT);
        blockMap.put(Blocks.DEEPSLATE, Block.DEEPSLATE);
        blockMap.put(Blocks.COBBLED_DEEPSLATE, Block.COBBLED_DEEPSLATE);
        blockMap.put(Blocks.COBBLED_DEEPSLATE_STAIRS, Block.COBBLED_DEEPSLATE_STAIRS);
        blockMap.put(Blocks.COBBLED_DEEPSLATE_SLAB, Block.COBBLED_DEEPSLATE_SLAB);
        blockMap.put(Blocks.COBBLED_DEEPSLATE_WALL, Block.COBBLED_DEEPSLATE_WALL);
        blockMap.put(Blocks.POLISHED_DEEPSLATE, Block.POLISHED_DEEPSLATE);
        blockMap.put(Blocks.POLISHED_DEEPSLATE_STAIRS, Block.POLISHED_DEEPSLATE_STAIRS);
        blockMap.put(Blocks.POLISHED_DEEPSLATE_SLAB, Block.POLISHED_DEEPSLATE_SLAB);
        blockMap.put(Blocks.POLISHED_DEEPSLATE_WALL, Block.POLISHED_DEEPSLATE_WALL);
        blockMap.put(Blocks.DEEPSLATE_TILES, Block.DEEPSLATE_TILES);
        blockMap.put(Blocks.DEEPSLATE_TILE_STAIRS, Block.DEEPSLATE_TILE_STAIRS);
        blockMap.put(Blocks.DEEPSLATE_TILE_SLAB, Block.DEEPSLATE_TILE_SLAB);
        blockMap.put(Blocks.DEEPSLATE_TILE_WALL, Block.DEEPSLATE_TILE_WALL);
        blockMap.put(Blocks.DEEPSLATE_BRICKS, Block.DEEPSLATE_BRICKS);
        blockMap.put(Blocks.DEEPSLATE_BRICK_STAIRS, Block.DEEPSLATE_BRICK_STAIRS);
        blockMap.put(Blocks.DEEPSLATE_BRICK_SLAB, Block.DEEPSLATE_BRICK_SLAB);
        blockMap.put(Blocks.DEEPSLATE_BRICK_WALL, Block.DEEPSLATE_BRICK_WALL);
        blockMap.put(Blocks.CHISELED_DEEPSLATE, Block.CHISELED_DEEPSLATE);
        blockMap.put(Blocks.CRACKED_DEEPSLATE_BRICKS, Block.CRACKED_DEEPSLATE_BRICKS);
        blockMap.put(Blocks.CRACKED_DEEPSLATE_TILES, Block.CRACKED_DEEPSLATE_TILES);
        blockMap.put(Blocks.INFESTED_DEEPSLATE, Block.INFESTED_DEEPSLATE);
        blockMap.put(Blocks.SMOOTH_BASALT, Block.SMOOTH_BASALT);
        blockMap.put(Blocks.RAW_IRON_BLOCK, Block.RAW_IRON_BLOCK);
        blockMap.put(Blocks.RAW_COPPER_BLOCK, Block.RAW_COPPER_BLOCK);
        blockMap.put(Blocks.RAW_GOLD_BLOCK, Block.RAW_GOLD_BLOCK);
        blockMap.put(Blocks.POTTED_AZALEA_BUSH, Block.POTTED_AZALEA_BUSH);
        blockMap.put(Blocks.POTTED_FLOWERING_AZALEA_BUSH, Block.POTTED_FLOWERING_AZALEA_BUSH);
    }

    // BLOCK Variant
    @Nullable
    public static Enum<?> blockVariant(Block block, AbstractBlock.AbstractBlockState blockState) {
        if(!blockVariantMap.containsKey(block)) return null;
        return blockVariantMap.get(block).wrap(blockState);
    }

    private static final Map<Block, CreationWrapper<AbstractBlock.AbstractBlockState, Enum<?>>> blockVariantMap;
    static {
        blockVariantMap = new HashMap<>();

        blockVariantMap.put(Block.STONE, state -> {
            if(state.getBlock() == Blocks.GRANITE) return BlockVariant.Stone.GRANITE;
            if(state.getBlock() == Blocks.POLISHED_GRANITE) return BlockVariant.Stone.POLISHED_GRANITE;
            if(state.getBlock() == Blocks.DIORITE) return BlockVariant.Stone.DIORITE;
            if(state.getBlock() == Blocks.POLISHED_DIORITE) return BlockVariant.Stone.POLISHED_DIORITE;
            if(state.getBlock() == Blocks.ANDESITE) return BlockVariant.Stone.ANDESITE;
            if(state.getBlock() == Blocks.POLISHED_ANDESITE) return BlockVariant.Stone.POLISHED_ANDESITE;
            return BlockVariant.Stone.STONE;
        });
        blockVariantMap.put(Block.DIRT, state -> {
            if(state.getBlock() == Blocks.GRASS) return BlockVariant.Dirt.GRASS;
            if(state.getBlock() == Blocks.MYCELIUM) return BlockVariant.Dirt.MYCELIUM;
            if(state.getBlock() == Blocks.PODZOL) return BlockVariant.Dirt.PODZOL;
            if(state.getBlock() == Blocks.COARSE_DIRT) return BlockVariant.Dirt.COARSE_DIRT;
            return BlockVariant.Dirt.DIRT;
        });
        blockVariantMap.put(Block.WOOD_PLANKS, state -> {
            if(state.getBlock() == Blocks.SPRUCE_PLANKS) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_PLANKS) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_PLANKS) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_PLANKS) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_PLANKS) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_PLANKS) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_PLANKS) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.WOOD_SAPLING, state -> {
            if(state.getBlock() == Blocks.SPRUCE_SAPLING) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_SAPLING) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_SAPLING) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_SAPLING) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_SAPLING) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_FUNGUS) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_FUNGUS) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.SAND, state -> {
            if(state.getBlock() == Blocks.SAND) return BlockVariant.Sand.YELLOW;
            return BlockVariant.Sand.RED;
        });
        blockVariantMap.put(Block.WOOD_LOG, state -> {
            if(state.getBlock() == Blocks.SPRUCE_LOG) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_LOG) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_LOG) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_LOG) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_LOG) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_STEM) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_STEM) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.LEAVES, state -> {
            if(state.getBlock() == Blocks.SPRUCE_LEAVES) return BlockVariant.Leaves.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_LEAVES) return BlockVariant.Leaves.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_LEAVES) return BlockVariant.Leaves.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_LEAVES) return BlockVariant.Leaves.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_LEAVES) return BlockVariant.Leaves.DARK_OAK;
            if(state.getBlock() == Blocks.AZALEA_LEAVES) return BlockVariant.Leaves.AZALEA;
            if(state.getBlock() == Blocks.FLOWERING_AZALEA_LEAVES) return BlockVariant.Leaves.FLOWERING_AZALEA;
            return BlockVariant.Leaves.OAK;
        });
        blockVariantMap.put(Block.SANDSTONE, state -> {
            if(state.getBlock() == Blocks.CHISELED_SANDSTONE) return BlockVariant.Sandstone.CHISELED;
            if(state.getBlock() == Blocks.CUT_SANDSTONE) return BlockVariant.Sandstone.CUT;
            return BlockVariant.Sandstone.DEFAULT;
        });
        blockVariantMap.put(Block.GRASS, state -> {
            if(state.getBlock() == Blocks.DEAD_BUSH) return BlockVariant.Grass.DEAD_BUSH;
            if(state.getBlock() == Blocks.FERN) return BlockVariant.Grass.FERN;
            return BlockVariant.Grass.GRASS;
        });
        blockVariantMap.put(Block.WOOL, state -> {
            if(state.getBlock() == Blocks.ORANGE_WOOL) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_WOOL) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_WOOL) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_WOOL) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_WOOL) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_WOOL) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_WOOL) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_WOOL) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_WOOL) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_WOOL) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_WOOL) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_WOOL) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_WOOL) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_WOOL) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_WOOL) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
        blockVariantMap.put(Block.FLOWER, state -> {
            if(state.getBlock() == Blocks.POPPY) return BlockVariant.Flower.POPPY;
            if(state.getBlock() == Blocks.BLUE_ORCHID) return BlockVariant.Flower.BLUE_ORCHID;
            if(state.getBlock() == Blocks.ALLIUM) return BlockVariant.Flower.ALLIUM;
            if(state.getBlock() == Blocks.AZURE_BLUET) return BlockVariant.Flower.AZURE_BLUET;
            if(state.getBlock() == Blocks.RED_TULIP) return BlockVariant.Flower.RED_TULIP;
            if(state.getBlock() == Blocks.ORANGE_TULIP) return BlockVariant.Flower.ORANGE_TULIP;
            if(state.getBlock() == Blocks.WHITE_TULIP) return BlockVariant.Flower.WHITE_TULIP;
            if(state.getBlock() == Blocks.PINK_TULIP) return BlockVariant.Flower.PINK_TULIP;
            if(state.getBlock() == Blocks.OXEYE_DAISY) return BlockVariant.Flower.OXEYE_DAISY;
            if(state.getBlock() == Blocks.CORNFLOWER) return BlockVariant.Flower.CORNFLOWER;
            if(state.getBlock() == Blocks.WITHER_ROSE) return BlockVariant.Flower.WITHER_ROSE;
            if(state.getBlock() == Blocks.LILY_OF_THE_VALLEY) return BlockVariant.Flower.LILY_OF_THE_VALLEY;
            return BlockVariant.Flower.DANDELION;
        });
        blockVariantMap.put(Block.WOOD_STAIRS, state -> {
            if(state.getBlock() == Blocks.SPRUCE_STAIRS) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_STAIRS) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_STAIRS) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_STAIRS) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_STAIRS) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_STAIRS) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_STAIRS) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.STAINED_GLASS, state -> {
            if(state.getBlock() == Blocks.ORANGE_STAINED_GLASS) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_STAINED_GLASS) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_STAINED_GLASS) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_STAINED_GLASS) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_STAINED_GLASS) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_STAINED_GLASS) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_STAINED_GLASS) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_STAINED_GLASS) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_STAINED_GLASS) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_STAINED_GLASS) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_STAINED_GLASS) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_STAINED_GLASS) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_STAINED_GLASS) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_STAINED_GLASS) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_STAINED_GLASS) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
        blockVariantMap.put(Block.WOOD_SIGN, state -> {
            if(state.getBlock() == Blocks.SPRUCE_SIGN) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_SIGN) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_SIGN) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_SIGN) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_SIGN) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_SIGN) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_SIGN) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.WOOD_WALL_SIGN, state -> {
            if(state.getBlock() == Blocks.SPRUCE_WALL_SIGN) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_WALL_SIGN) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_WALL_SIGN) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_WALL_SIGN) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_WALL_SIGN) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_WALL_SIGN) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_WALL_SIGN) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.WOOD_PRESSURE_PLATE, state -> {
            if(state.getBlock() == Blocks.SPRUCE_PRESSURE_PLATE) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_PRESSURE_PLATE) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_PRESSURE_PLATE) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_PRESSURE_PLATE) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_PRESSURE_PLATE) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_PRESSURE_PLATE) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_PRESSURE_PLATE) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.WOOD_TRAPDOOR, state -> {
            if(state.getBlock() == Blocks.SPRUCE_TRAPDOOR) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_TRAPDOOR) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_TRAPDOOR) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_TRAPDOOR) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_TRAPDOOR) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_TRAPDOOR) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_TRAPDOOR) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.STONE_BRICKS, state -> {
            if(state.getBlock() == Blocks.MOSSY_STONE_BRICKS) return BlockVariant.StoneBricks.MOSSY;
            if(state.getBlock() == Blocks.CRACKED_STONE_BRICKS) return BlockVariant.StoneBricks.CRACKED;
            if(state.getBlock() == Blocks.CHISELED_STONE_BRICKS) return BlockVariant.StoneBricks.CHISELED;
            return BlockVariant.StoneBricks.DEFAULT;
        });
        blockVariantMap.put(Block.INFESTED_STONE, state -> {
            if(state.getBlock() == Blocks.INFESTED_COBBLESTONE) return BlockVariant.InfestedStone.COBBLESTONE;
            if(state.getBlock() == Blocks.INFESTED_STONE_BRICKS) return BlockVariant.InfestedStone.STONE_BRICKS;
            if(state.getBlock() == Blocks.INFESTED_MOSSY_STONE_BRICKS) return BlockVariant.InfestedStone.MOSSY_BRICKS;
            if(state.getBlock() == Blocks.INFESTED_CRACKED_STONE_BRICKS) return BlockVariant.InfestedStone.CRACKED_BRICKS;
            if(state.getBlock() == Blocks.INFESTED_CHISELED_STONE_BRICKS) return BlockVariant.InfestedStone.CHISELED_BRICKS;
            if(state.getBlock() == Blocks.INFESTED_DEEPSLATE) return BlockVariant.InfestedStone.DEEPSLATE;
            return BlockVariant.InfestedStone.STONE;
        });
        blockVariantMap.put(Block.MUSHROOM_BLOCK, state -> {
            if(state.getBlock() == Blocks.RED_MUSHROOM_BLOCK) return BlockVariant.MushroomBlock.RED;
            if(state.getBlock() == Blocks.BROWN_MUSHROOM_BLOCK) return BlockVariant.MushroomBlock.BROWN;
            return BlockVariant.MushroomBlock.STEM;
        });
        blockVariantMap.put(Block.CAULDRON, state -> {
            if(state.getBlock() == Blocks.WATER_CAULDRON) return BlockVariant.CauldronContents.WATER;
            if(state.getBlock() == Blocks.LAVA_CAULDRON) return BlockVariant.CauldronContents.LAVA;
            if(state.getBlock() == Blocks.POWDER_SNOW_CAULDRON) return BlockVariant.CauldronContents.SNOW;
            return BlockVariant.CauldronContents.EMPTY;
        });
        blockVariantMap.put(Block.COBBLESTONE_WALL, state -> {
            if(state.getBlock() == Blocks.MOSSY_COBBLESTONE_WALL) return BlockVariant.CobblestoneWall.MOSSY_COBBLESTONE;
            return BlockVariant.CobblestoneWall.COBBLESTONE;
        });
        blockVariantMap.put(Block.FLOWER_POT, state -> {
            if(state.getBlock() == Blocks.POTTED_POPPY) return BlockVariant.PotContents.POPPY;
            if(state.getBlock() == Blocks.POTTED_BLUE_ORCHID) return BlockVariant.PotContents.BLUE_ORCHID;
            if(state.getBlock() == Blocks.POTTED_ALLIUM) return BlockVariant.PotContents.ALLIUM;
            if(state.getBlock() == Blocks.POTTED_AZURE_BLUET) return BlockVariant.PotContents.AZURE_BLUET;
            if(state.getBlock() == Blocks.POTTED_RED_TULIP) return BlockVariant.PotContents.RED_TULIP;
            if(state.getBlock() == Blocks.POTTED_ORANGE_TULIP) return BlockVariant.PotContents.ORANGE_TULIP;
            if(state.getBlock() == Blocks.POTTED_WHITE_TULIP) return BlockVariant.PotContents.WHITE_TULIP;
            if(state.getBlock() == Blocks.POTTED_PINK_TULIP) return BlockVariant.PotContents.PINK_TULIP;
            if(state.getBlock() == Blocks.POTTED_OXEYE_DAISY) return BlockVariant.PotContents.OXEYE_DAISY;
            if(state.getBlock() == Blocks.POTTED_DANDELION) return BlockVariant.PotContents.DANDELION;
            if(state.getBlock() == Blocks.POTTED_OAK_SAPLING) return BlockVariant.PotContents.OAK_SAPLING;
            if(state.getBlock() == Blocks.POTTED_SPRUCE_SAPLING) return BlockVariant.PotContents.SPRUCE_SAPLING;
            if(state.getBlock() == Blocks.POTTED_BIRCH_SAPLING) return BlockVariant.PotContents.BIRCH_SAPLING;
            if(state.getBlock() == Blocks.POTTED_JUNGLE_SAPLING) return BlockVariant.PotContents.JUNGLE_SAPLING;
            if(state.getBlock() == Blocks.POTTED_ACACIA_SAPLING) return BlockVariant.PotContents.ACACIA_SAPLING;
            if(state.getBlock() == Blocks.POTTED_DARK_OAK_SAPLING) return BlockVariant.PotContents.DARK_OAK_SAPLING;
            if(state.getBlock() == Blocks.POTTED_RED_MUSHROOM) return BlockVariant.PotContents.MUSHROOM_RED;
            if(state.getBlock() == Blocks.POTTED_BROWN_MUSHROOM) return BlockVariant.PotContents.MUSHROOM_BROWN;
            if(state.getBlock() == Blocks.POTTED_DEAD_BUSH) return BlockVariant.PotContents.DEAD_BUSH;
            if(state.getBlock() == Blocks.POTTED_FERN) return BlockVariant.PotContents.FERN;
            if(state.getBlock() == Blocks.POTTED_CACTUS) return BlockVariant.PotContents.CACTUS;
            if(state.getBlock() == Blocks.POTTED_CORNFLOWER) return BlockVariant.PotContents.CORNFLOWER;
            if(state.getBlock() == Blocks.POTTED_LILY_OF_THE_VALLEY) return BlockVariant.PotContents.LILY_OF_THE_VALLEY;
            if(state.getBlock() == Blocks.POTTED_WITHER_ROSE) return BlockVariant.PotContents.WITHER_ROSE;
            return BlockVariant.PotContents.EMPTY;
        });
        blockVariantMap.put(Block.WOOD_BUTTON, state -> {
            if(state.getBlock() == Blocks.SPRUCE_BUTTON) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_BUTTON) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_BUTTON) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_BUTTON) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_BUTTON) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_BUTTON) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_BUTTON) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.ANVIL, state -> {
            if(state.getBlock() == Blocks.CHIPPED_ANVIL) return BlockVariant.Anvil.CHIPPED;
            if(state.getBlock() == Blocks.DAMAGED_ANVIL) return BlockVariant.Anvil.DAMAGED;
            return BlockVariant.Anvil.NORMAL;
        });
        blockVariantMap.put(Block.QUARTZ, state -> {
            if(state.getBlock() == Blocks.SMOOTH_QUARTZ) return BlockVariant.Quartz.SMOOTH;
            if(state.getBlock() == Blocks.CHISELED_QUARTZ_BLOCK) return BlockVariant.Quartz.CHISELED;
            if(state.getBlock() == Blocks.QUARTZ_PILLAR) return BlockVariant.Quartz.PILLAR;
            if(state.getBlock() == Blocks.QUARTZ_BRICKS) return BlockVariant.Quartz.BRICKS;
            return BlockVariant.Quartz.BLOCK;
        });
        blockVariantMap.put(Block.STAINED_TERRACOTTA, state -> {
            if(state.getBlock() == Blocks.ORANGE_TERRACOTTA) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_TERRACOTTA) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_TERRACOTTA) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_TERRACOTTA) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_TERRACOTTA) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_TERRACOTTA) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_TERRACOTTA) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_TERRACOTTA) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_TERRACOTTA) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_TERRACOTTA) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_TERRACOTTA) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_TERRACOTTA) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_TERRACOTTA) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_TERRACOTTA) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_TERRACOTTA) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
        blockVariantMap.put(Block.STAINED_GLASS_PANE, state -> {
            if(state.getBlock() == Blocks.ORANGE_STAINED_GLASS_PANE) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_STAINED_GLASS_PANE) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_STAINED_GLASS_PANE) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_STAINED_GLASS_PANE) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_STAINED_GLASS_PANE) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_STAINED_GLASS_PANE) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_STAINED_GLASS_PANE) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_STAINED_GLASS_PANE) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_STAINED_GLASS_PANE) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_STAINED_GLASS_PANE) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_STAINED_GLASS_PANE) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_STAINED_GLASS_PANE) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_STAINED_GLASS_PANE) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_STAINED_GLASS_PANE) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_STAINED_GLASS_PANE) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
        blockVariantMap.put(Block.PRISMARINE, state -> {
            if(state.getBlock() == Blocks.PRISMARINE_BRICKS) return BlockVariant.Prismarine.BRICKS;
            if(state.getBlock() == Blocks.DARK_PRISMARINE) return BlockVariant.Prismarine.DARK;
            return BlockVariant.Prismarine.ROUGH;
        });
        blockVariantMap.put(Block.CARPET, state -> {
            if(state.getBlock() == Blocks.ORANGE_CARPET) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_CARPET) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_CARPET) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_CARPET) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_CARPET) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_CARPET) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_CARPET) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_CARPET) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_CARPET) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_CARPET) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_CARPET) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_CARPET) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_CARPET) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_CARPET) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_CARPET) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
        blockVariantMap.put(Block.DOUBLE_PLANT, state -> {
            if(state.getBlock() == Blocks.LILAC) return BlockVariant.DoublePlant.LILAC;
            if(state.getBlock() == Blocks.GRASS) return BlockVariant.DoublePlant.GRASS;
            if(state.getBlock() == Blocks.FERN) return BlockVariant.DoublePlant.FERN;
            if(state.getBlock() == Blocks.ROSE_BUSH) return BlockVariant.DoublePlant.ROSE;
            if(state.getBlock() == Blocks.PEONY) return BlockVariant.DoublePlant.PAEONIA;
            return BlockVariant.DoublePlant.SUNFLOWER;
        });
        blockVariantMap.put(Block.RED_SANDSTONE, state -> {
            if(state.getBlock() == Blocks.CHISELED_RED_SANDSTONE) return BlockVariant.Sandstone.CHISELED;
            if(state.getBlock() == Blocks.CUT_RED_SANDSTONE) return BlockVariant.Sandstone.CUT;
            return BlockVariant.Sandstone.DEFAULT;
        });
        blockVariantMap.put(Block.WOOD_SLAB, state -> {
            if(state.getBlock() == Blocks.SPRUCE_SLAB) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_SLAB) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_SLAB) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_SLAB) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_SLAB) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_SLAB) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_SLAB) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.STONE_SLAB, state -> {
            if(state.getBlock() == Blocks.SMOOTH_STONE_SLAB) return BlockVariant.StoneSlab.SMOOTH_STONE;
            if(state.getBlock() == Blocks.SANDSTONE_SLAB) return BlockVariant.StoneSlab.SANDSTONE;
            if(state.getBlock() == Blocks.CUT_SANDSTONE_SLAB) return BlockVariant.StoneSlab.CUT_SANDSTONE;
            if(state.getBlock() == Blocks.PETRIFIED_OAK_SLAB) return BlockVariant.StoneSlab.PETRIFIED_OAK;
            if(state.getBlock() == Blocks.COBBLESTONE_SLAB) return BlockVariant.StoneSlab.COBBLESTONE;
            if(state.getBlock() == Blocks.BRICK_SLAB) return BlockVariant.StoneSlab.BRICK;
            if(state.getBlock() == Blocks.STONE_BRICK_SLAB) return BlockVariant.StoneSlab.STONE_BRICK;
            if(state.getBlock() == Blocks.NETHER_BRICK_SLAB) return BlockVariant.StoneSlab.NETHER_BRICK;
            if(state.getBlock() == Blocks.QUARTZ_SLAB) return BlockVariant.StoneSlab.QUARTZ;
            if(state.getBlock() == Blocks.RED_SANDSTONE_SLAB) return BlockVariant.StoneSlab.RED_SANDSTONE;
            if(state.getBlock() == Blocks.CUT_RED_SANDSTONE_SLAB) return BlockVariant.StoneSlab.CUT_RED_SANDSTONE;
            if(state.getBlock() == Blocks.PURPUR_SLAB) return BlockVariant.StoneSlab.PURPUR;
            return BlockVariant.StoneSlab.STONE;
        });
        blockVariantMap.put(Block.WOOD_FENCE_GATE, state -> {
            if(state.getBlock() == Blocks.SPRUCE_FENCE_GATE) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_FENCE_GATE) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_FENCE_GATE) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_FENCE_GATE) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.DARK_OAK_FENCE_GATE) return BlockVariant.Wood.DARK_OAK;
            if(state.getBlock() == Blocks.WARPED_FENCE_GATE) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_FENCE_GATE) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.OAK;
        });
        blockVariantMap.put(Block.WOOD_FENCE, state -> {
            if(state.getBlock() == Blocks.OAK_FENCE) return BlockVariant.Wood.OAK;
            if(state.getBlock() == Blocks.SPRUCE_FENCE) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_FENCE) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_FENCE) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_FENCE) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.WARPED_FENCE) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_FENCE) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.DARK_OAK;
        });
        blockVariantMap.put(Block.WOOD_DOOR, state -> {
            if(state.getBlock() == Blocks.OAK_DOOR) return BlockVariant.Wood.OAK;
            if(state.getBlock() == Blocks.SPRUCE_DOOR) return BlockVariant.Wood.SPRUCE;
            if(state.getBlock() == Blocks.BIRCH_DOOR) return BlockVariant.Wood.BIRCH;
            if(state.getBlock() == Blocks.JUNGLE_DOOR) return BlockVariant.Wood.JUNGLE;
            if(state.getBlock() == Blocks.ACACIA_DOOR) return BlockVariant.Wood.ACACIA;
            if(state.getBlock() == Blocks.WARPED_DOOR) return BlockVariant.Wood.WARPED;
            if(state.getBlock() == Blocks.CRIMSON_DOOR) return BlockVariant.Wood.CRIMSON;
            return BlockVariant.Wood.DARK_OAK;
        });
        blockVariantMap.put(Block.SHULKER_BOX, state -> {
            if(state.getBlock() == Blocks.WHITE_SHULKER_BOX) return DyeColor.WHITE;
            if(state.getBlock() == Blocks.ORANGE_SHULKER_BOX) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_SHULKER_BOX) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_SHULKER_BOX) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_SHULKER_BOX) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_SHULKER_BOX) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_SHULKER_BOX) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_SHULKER_BOX) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_SHULKER_BOX) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_SHULKER_BOX) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_SHULKER_BOX) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_SHULKER_BOX) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_SHULKER_BOX) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_SHULKER_BOX) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_SHULKER_BOX) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_SHULKER_BOX) return DyeColor.BLACK;
            return null; // Default shulker box
        });
        blockVariantMap.put(Block.GLAZED_TERRACOTTA, state -> {
            if(state.getBlock() == Blocks.ORANGE_GLAZED_TERRACOTTA) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_GLAZED_TERRACOTTA) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_GLAZED_TERRACOTTA) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_GLAZED_TERRACOTTA) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_GLAZED_TERRACOTTA) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_GLAZED_TERRACOTTA) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_GLAZED_TERRACOTTA) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_GLAZED_TERRACOTTA) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_GLAZED_TERRACOTTA) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_GLAZED_TERRACOTTA) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_GLAZED_TERRACOTTA) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_GLAZED_TERRACOTTA) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_GLAZED_TERRACOTTA) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
        blockVariantMap.put(Block.CONCRETE, state -> {
            if(state.getBlock() == Blocks.ORANGE_CONCRETE) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_CONCRETE) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_CONCRETE) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_CONCRETE) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_CONCRETE) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_CONCRETE) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_CONCRETE) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_CONCRETE) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_CONCRETE) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_CONCRETE) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_CONCRETE) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_CONCRETE) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_CONCRETE) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_CONCRETE) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_CONCRETE) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
        blockVariantMap.put(Block.CONCRETE_POWDER, state -> {
            if(state.getBlock() == Blocks.ORANGE_CONCRETE_POWDER) return DyeColor.ORANGE;
            if(state.getBlock() == Blocks.MAGENTA_CONCRETE_POWDER) return DyeColor.MAGENTA;
            if(state.getBlock() == Blocks.LIGHT_BLUE_CONCRETE_POWDER) return DyeColor.LIGHT_BLUE;
            if(state.getBlock() == Blocks.YELLOW_CONCRETE_POWDER) return DyeColor.YELLOW;
            if(state.getBlock() == Blocks.LIME_CONCRETE_POWDER) return DyeColor.LIME;
            if(state.getBlock() == Blocks.PINK_CONCRETE_POWDER) return DyeColor.PINK;
            if(state.getBlock() == Blocks.GRAY_CONCRETE_POWDER) return DyeColor.GRAY;
            if(state.getBlock() == Blocks.LIGHT_GRAY_CONCRETE_POWDER) return DyeColor.LIGHT_GRAY;
            if(state.getBlock() == Blocks.CYAN_CONCRETE_POWDER) return DyeColor.CYAN;
            if(state.getBlock() == Blocks.PURPLE_CONCRETE_POWDER) return DyeColor.PURPLE;
            if(state.getBlock() == Blocks.BLUE_CONCRETE_POWDER) return DyeColor.BLUE;
            if(state.getBlock() == Blocks.BROWN_CONCRETE_POWDER) return DyeColor.BROWN;
            if(state.getBlock() == Blocks.GREEN_CONCRETE_POWDER) return DyeColor.GREEN;
            if(state.getBlock() == Blocks.RED_CONCRETE_POWDER) return DyeColor.RED;
            if(state.getBlock() == Blocks.BLACK_CONCRETE_POWDER) return DyeColor.BLACK;
            return DyeColor.WHITE;
        });
    }


    public static <T extends Packet> net.meshmc.mesh.api.network.Packet packet(T packet) {
        if(packet == null) return null;
        var p = packetMap.get(packet.getClass());
        if(p == null) return new PacketMesh<>(packet);
        return (net.meshmc.mesh.api.network.Packet) p.apply(packet);
    }

    public static final Map<Class<? extends Packet>, Function> packetMap;
    static {
        packetMap = new HashMap<>();

        // C2S
        packetMap.put(ChatMessageC2SPacket.class, packet -> new CPacketChatMessageMesh((ChatMessageC2SPacket) packet));

        packetMap.put(TeleportConfirmC2SPacket.class, packet -> new CPacketConfirmTeleportMesh((TeleportConfirmC2SPacket) packet));

        packetMap.put(HandSwingC2SPacket.class, packet -> new CPacketHandSwingMesh((HandSwingC2SPacket) packet));

        packetMap.put(PlayerInputC2SPacket.class, packet -> new CPacketInputMesh((PlayerInputC2SPacket) packet));

        packetMap.put(PlayerMoveC2SPacket.OnGroundOnly.class, packet -> new CPacketMovePlayerMesh.OnGround((PlayerMoveC2SPacket.OnGroundOnly) packet));
        packetMap.put(PlayerMoveC2SPacket.PositionAndOnGround.class, packet -> new CPacketMovePlayerMesh.Position((PlayerMoveC2SPacket.PositionAndOnGround) packet));
        packetMap.put(PlayerMoveC2SPacket.Full.class, packet -> new CPacketMovePlayerMesh.PositionRotation((PlayerMoveC2SPacket.Full) packet));
        packetMap.put(PlayerMoveC2SPacket.LookAndOnGround.class, packet -> new CPacketMovePlayerMesh.Rotation((PlayerMoveC2SPacket.LookAndOnGround) packet));

        packetMap.put(VehicleMoveC2SPacket.class, packet -> new CPacketMoveVehicleMesh((VehicleMoveC2SPacket) packet));

        packetMap.put(BoatPaddleStateC2SPacket.class, packet -> new CPacketSteerBoatMesh((BoatPaddleStateC2SPacket) packet));

        packetMap.put(PlayerInteractBlockC2SPacket.class, packet -> new CPacketUseBlockMesh((PlayerInteractBlockC2SPacket) packet));

        packetMap.put(PlayerInteractEntityC2SPacket.class, packet -> new CPacketUseEntityMesh((PlayerInteractEntityC2SPacket) packet));

        packetMap.put(PlayerInteractItemC2SPacket.class, packet -> new CPacketUseItemMesh((PlayerInteractItemC2SPacket) packet));

        // S2C
        packetMap.put(AdvancementUpdateS2CPacket.class, packet -> new SPacketAdvancementUpdateMesh((AdvancementUpdateS2CPacket) packet));

        packetMap.put(BlockEventS2CPacket.class, packet -> new SPacketBlockActionMesh((BlockEventS2CPacket) packet));

        packetMap.put(BlockUpdateS2CPacket.class, packet -> new SPacketBlockUpdateMesh((BlockUpdateS2CPacket) packet));

        packetMap.put(BlockBreakingProgressS2CPacket.class, packet -> new SPacketBreakProgressMesh((BlockBreakingProgressS2CPacket) packet));

        packetMap.put(PlayerPositionLookS2CPacket.class, packet -> new SPacketPlayerPositionRotationMesh((PlayerPositionLookS2CPacket) packet));

        packetMap.put(BlockEntityUpdateS2CPacket.class, packet -> new SPacketTileEntityUpdateMesh((BlockEntityUpdateS2CPacket) packet));
    }
}
